
motorDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006664  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080067fc  080067fc  000167fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006844  08006844  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006844  08006844  00016844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800684c  0800684c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006850  08006850  00016850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006854  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000010  08006864  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08006864  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f06  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002105  00000000  00000000  00031f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001068  00000000  00000000  00034090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cdc  00000000  00000000  000350f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024280  00000000  00000000  00035dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123f0  00000000  00000000  0005a054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8946  00000000  00000000  0006c444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000047e0  00000000  00000000  00154d8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  0015956c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080067e4 	.word	0x080067e4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	080067e4 	.word	0x080067e4

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2iz>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d215      	bcs.n	80007da <__aeabi_d2iz+0x36>
 80007ae:	d511      	bpl.n	80007d4 <__aeabi_d2iz+0x30>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d912      	bls.n	80007e0 <__aeabi_d2iz+0x3c>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ca:	fa23 f002 	lsr.w	r0, r3, r2
 80007ce:	bf18      	it	ne
 80007d0:	4240      	negne	r0, r0
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d105      	bne.n	80007ec <__aeabi_d2iz+0x48>
 80007e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	bf08      	it	eq
 80007e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007ea:	4770      	bx	lr
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_uldivmod>:
 8000894:	b953      	cbnz	r3, 80008ac <__aeabi_uldivmod+0x18>
 8000896:	b94a      	cbnz	r2, 80008ac <__aeabi_uldivmod+0x18>
 8000898:	2900      	cmp	r1, #0
 800089a:	bf08      	it	eq
 800089c:	2800      	cmpeq	r0, #0
 800089e:	bf1c      	itt	ne
 80008a0:	f04f 31ff 	movne.w	r1, #4294967295
 80008a4:	f04f 30ff 	movne.w	r0, #4294967295
 80008a8:	f000 b970 	b.w	8000b8c <__aeabi_idiv0>
 80008ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008b4:	f000 f806 	bl	80008c4 <__udivmoddi4>
 80008b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c0:	b004      	add	sp, #16
 80008c2:	4770      	bx	lr

080008c4 <__udivmoddi4>:
 80008c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c8:	9e08      	ldr	r6, [sp, #32]
 80008ca:	460d      	mov	r5, r1
 80008cc:	4604      	mov	r4, r0
 80008ce:	460f      	mov	r7, r1
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d14a      	bne.n	800096a <__udivmoddi4+0xa6>
 80008d4:	428a      	cmp	r2, r1
 80008d6:	4694      	mov	ip, r2
 80008d8:	d965      	bls.n	80009a6 <__udivmoddi4+0xe2>
 80008da:	fab2 f382 	clz	r3, r2
 80008de:	b143      	cbz	r3, 80008f2 <__udivmoddi4+0x2e>
 80008e0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008e4:	f1c3 0220 	rsb	r2, r3, #32
 80008e8:	409f      	lsls	r7, r3
 80008ea:	fa20 f202 	lsr.w	r2, r0, r2
 80008ee:	4317      	orrs	r7, r2
 80008f0:	409c      	lsls	r4, r3
 80008f2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008f6:	fa1f f58c 	uxth.w	r5, ip
 80008fa:	fbb7 f1fe 	udiv	r1, r7, lr
 80008fe:	0c22      	lsrs	r2, r4, #16
 8000900:	fb0e 7711 	mls	r7, lr, r1, r7
 8000904:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000908:	fb01 f005 	mul.w	r0, r1, r5
 800090c:	4290      	cmp	r0, r2
 800090e:	d90a      	bls.n	8000926 <__udivmoddi4+0x62>
 8000910:	eb1c 0202 	adds.w	r2, ip, r2
 8000914:	f101 37ff 	add.w	r7, r1, #4294967295
 8000918:	f080 811c 	bcs.w	8000b54 <__udivmoddi4+0x290>
 800091c:	4290      	cmp	r0, r2
 800091e:	f240 8119 	bls.w	8000b54 <__udivmoddi4+0x290>
 8000922:	3902      	subs	r1, #2
 8000924:	4462      	add	r2, ip
 8000926:	1a12      	subs	r2, r2, r0
 8000928:	b2a4      	uxth	r4, r4
 800092a:	fbb2 f0fe 	udiv	r0, r2, lr
 800092e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000932:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000936:	fb00 f505 	mul.w	r5, r0, r5
 800093a:	42a5      	cmp	r5, r4
 800093c:	d90a      	bls.n	8000954 <__udivmoddi4+0x90>
 800093e:	eb1c 0404 	adds.w	r4, ip, r4
 8000942:	f100 32ff 	add.w	r2, r0, #4294967295
 8000946:	f080 8107 	bcs.w	8000b58 <__udivmoddi4+0x294>
 800094a:	42a5      	cmp	r5, r4
 800094c:	f240 8104 	bls.w	8000b58 <__udivmoddi4+0x294>
 8000950:	4464      	add	r4, ip
 8000952:	3802      	subs	r0, #2
 8000954:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000958:	1b64      	subs	r4, r4, r5
 800095a:	2100      	movs	r1, #0
 800095c:	b11e      	cbz	r6, 8000966 <__udivmoddi4+0xa2>
 800095e:	40dc      	lsrs	r4, r3
 8000960:	2300      	movs	r3, #0
 8000962:	e9c6 4300 	strd	r4, r3, [r6]
 8000966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096a:	428b      	cmp	r3, r1
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0xbc>
 800096e:	2e00      	cmp	r6, #0
 8000970:	f000 80ed 	beq.w	8000b4e <__udivmoddi4+0x28a>
 8000974:	2100      	movs	r1, #0
 8000976:	e9c6 0500 	strd	r0, r5, [r6]
 800097a:	4608      	mov	r0, r1
 800097c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000980:	fab3 f183 	clz	r1, r3
 8000984:	2900      	cmp	r1, #0
 8000986:	d149      	bne.n	8000a1c <__udivmoddi4+0x158>
 8000988:	42ab      	cmp	r3, r5
 800098a:	d302      	bcc.n	8000992 <__udivmoddi4+0xce>
 800098c:	4282      	cmp	r2, r0
 800098e:	f200 80f8 	bhi.w	8000b82 <__udivmoddi4+0x2be>
 8000992:	1a84      	subs	r4, r0, r2
 8000994:	eb65 0203 	sbc.w	r2, r5, r3
 8000998:	2001      	movs	r0, #1
 800099a:	4617      	mov	r7, r2
 800099c:	2e00      	cmp	r6, #0
 800099e:	d0e2      	beq.n	8000966 <__udivmoddi4+0xa2>
 80009a0:	e9c6 4700 	strd	r4, r7, [r6]
 80009a4:	e7df      	b.n	8000966 <__udivmoddi4+0xa2>
 80009a6:	b902      	cbnz	r2, 80009aa <__udivmoddi4+0xe6>
 80009a8:	deff      	udf	#255	; 0xff
 80009aa:	fab2 f382 	clz	r3, r2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	f040 8090 	bne.w	8000ad4 <__udivmoddi4+0x210>
 80009b4:	1a8a      	subs	r2, r1, r2
 80009b6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009ba:	fa1f fe8c 	uxth.w	lr, ip
 80009be:	2101      	movs	r1, #1
 80009c0:	fbb2 f5f7 	udiv	r5, r2, r7
 80009c4:	fb07 2015 	mls	r0, r7, r5, r2
 80009c8:	0c22      	lsrs	r2, r4, #16
 80009ca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009ce:	fb0e f005 	mul.w	r0, lr, r5
 80009d2:	4290      	cmp	r0, r2
 80009d4:	d908      	bls.n	80009e8 <__udivmoddi4+0x124>
 80009d6:	eb1c 0202 	adds.w	r2, ip, r2
 80009da:	f105 38ff 	add.w	r8, r5, #4294967295
 80009de:	d202      	bcs.n	80009e6 <__udivmoddi4+0x122>
 80009e0:	4290      	cmp	r0, r2
 80009e2:	f200 80cb 	bhi.w	8000b7c <__udivmoddi4+0x2b8>
 80009e6:	4645      	mov	r5, r8
 80009e8:	1a12      	subs	r2, r2, r0
 80009ea:	b2a4      	uxth	r4, r4
 80009ec:	fbb2 f0f7 	udiv	r0, r2, r7
 80009f0:	fb07 2210 	mls	r2, r7, r0, r2
 80009f4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f8:	fb0e fe00 	mul.w	lr, lr, r0
 80009fc:	45a6      	cmp	lr, r4
 80009fe:	d908      	bls.n	8000a12 <__udivmoddi4+0x14e>
 8000a00:	eb1c 0404 	adds.w	r4, ip, r4
 8000a04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a08:	d202      	bcs.n	8000a10 <__udivmoddi4+0x14c>
 8000a0a:	45a6      	cmp	lr, r4
 8000a0c:	f200 80bb 	bhi.w	8000b86 <__udivmoddi4+0x2c2>
 8000a10:	4610      	mov	r0, r2
 8000a12:	eba4 040e 	sub.w	r4, r4, lr
 8000a16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a1a:	e79f      	b.n	800095c <__udivmoddi4+0x98>
 8000a1c:	f1c1 0720 	rsb	r7, r1, #32
 8000a20:	408b      	lsls	r3, r1
 8000a22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000a2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a32:	40fd      	lsrs	r5, r7
 8000a34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a38:	4323      	orrs	r3, r4
 8000a3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a3e:	fa1f fe8c 	uxth.w	lr, ip
 8000a42:	fb09 5518 	mls	r5, r9, r8, r5
 8000a46:	0c1c      	lsrs	r4, r3, #16
 8000a48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000a50:	42a5      	cmp	r5, r4
 8000a52:	fa02 f201 	lsl.w	r2, r2, r1
 8000a56:	fa00 f001 	lsl.w	r0, r0, r1
 8000a5a:	d90b      	bls.n	8000a74 <__udivmoddi4+0x1b0>
 8000a5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a64:	f080 8088 	bcs.w	8000b78 <__udivmoddi4+0x2b4>
 8000a68:	42a5      	cmp	r5, r4
 8000a6a:	f240 8085 	bls.w	8000b78 <__udivmoddi4+0x2b4>
 8000a6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a72:	4464      	add	r4, ip
 8000a74:	1b64      	subs	r4, r4, r5
 8000a76:	b29d      	uxth	r5, r3
 8000a78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a88:	45a6      	cmp	lr, r4
 8000a8a:	d908      	bls.n	8000a9e <__udivmoddi4+0x1da>
 8000a8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a90:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a94:	d26c      	bcs.n	8000b70 <__udivmoddi4+0x2ac>
 8000a96:	45a6      	cmp	lr, r4
 8000a98:	d96a      	bls.n	8000b70 <__udivmoddi4+0x2ac>
 8000a9a:	3b02      	subs	r3, #2
 8000a9c:	4464      	add	r4, ip
 8000a9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aa2:	fba3 9502 	umull	r9, r5, r3, r2
 8000aa6:	eba4 040e 	sub.w	r4, r4, lr
 8000aaa:	42ac      	cmp	r4, r5
 8000aac:	46c8      	mov	r8, r9
 8000aae:	46ae      	mov	lr, r5
 8000ab0:	d356      	bcc.n	8000b60 <__udivmoddi4+0x29c>
 8000ab2:	d053      	beq.n	8000b5c <__udivmoddi4+0x298>
 8000ab4:	b156      	cbz	r6, 8000acc <__udivmoddi4+0x208>
 8000ab6:	ebb0 0208 	subs.w	r2, r0, r8
 8000aba:	eb64 040e 	sbc.w	r4, r4, lr
 8000abe:	fa04 f707 	lsl.w	r7, r4, r7
 8000ac2:	40ca      	lsrs	r2, r1
 8000ac4:	40cc      	lsrs	r4, r1
 8000ac6:	4317      	orrs	r7, r2
 8000ac8:	e9c6 7400 	strd	r7, r4, [r6]
 8000acc:	4618      	mov	r0, r3
 8000ace:	2100      	movs	r1, #0
 8000ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad4:	f1c3 0120 	rsb	r1, r3, #32
 8000ad8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000adc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ae0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ae4:	409d      	lsls	r5, r3
 8000ae6:	432a      	orrs	r2, r5
 8000ae8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aec:	fa1f fe8c 	uxth.w	lr, ip
 8000af0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000af4:	fb07 1510 	mls	r5, r7, r0, r1
 8000af8:	0c11      	lsrs	r1, r2, #16
 8000afa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000afe:	fb00 f50e 	mul.w	r5, r0, lr
 8000b02:	428d      	cmp	r5, r1
 8000b04:	fa04 f403 	lsl.w	r4, r4, r3
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x258>
 8000b0a:	eb1c 0101 	adds.w	r1, ip, r1
 8000b0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b12:	d22f      	bcs.n	8000b74 <__udivmoddi4+0x2b0>
 8000b14:	428d      	cmp	r5, r1
 8000b16:	d92d      	bls.n	8000b74 <__udivmoddi4+0x2b0>
 8000b18:	3802      	subs	r0, #2
 8000b1a:	4461      	add	r1, ip
 8000b1c:	1b49      	subs	r1, r1, r5
 8000b1e:	b292      	uxth	r2, r2
 8000b20:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b24:	fb07 1115 	mls	r1, r7, r5, r1
 8000b28:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b2c:	fb05 f10e 	mul.w	r1, r5, lr
 8000b30:	4291      	cmp	r1, r2
 8000b32:	d908      	bls.n	8000b46 <__udivmoddi4+0x282>
 8000b34:	eb1c 0202 	adds.w	r2, ip, r2
 8000b38:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b3c:	d216      	bcs.n	8000b6c <__udivmoddi4+0x2a8>
 8000b3e:	4291      	cmp	r1, r2
 8000b40:	d914      	bls.n	8000b6c <__udivmoddi4+0x2a8>
 8000b42:	3d02      	subs	r5, #2
 8000b44:	4462      	add	r2, ip
 8000b46:	1a52      	subs	r2, r2, r1
 8000b48:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b4c:	e738      	b.n	80009c0 <__udivmoddi4+0xfc>
 8000b4e:	4631      	mov	r1, r6
 8000b50:	4630      	mov	r0, r6
 8000b52:	e708      	b.n	8000966 <__udivmoddi4+0xa2>
 8000b54:	4639      	mov	r1, r7
 8000b56:	e6e6      	b.n	8000926 <__udivmoddi4+0x62>
 8000b58:	4610      	mov	r0, r2
 8000b5a:	e6fb      	b.n	8000954 <__udivmoddi4+0x90>
 8000b5c:	4548      	cmp	r0, r9
 8000b5e:	d2a9      	bcs.n	8000ab4 <__udivmoddi4+0x1f0>
 8000b60:	ebb9 0802 	subs.w	r8, r9, r2
 8000b64:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	e7a3      	b.n	8000ab4 <__udivmoddi4+0x1f0>
 8000b6c:	4645      	mov	r5, r8
 8000b6e:	e7ea      	b.n	8000b46 <__udivmoddi4+0x282>
 8000b70:	462b      	mov	r3, r5
 8000b72:	e794      	b.n	8000a9e <__udivmoddi4+0x1da>
 8000b74:	4640      	mov	r0, r8
 8000b76:	e7d1      	b.n	8000b1c <__udivmoddi4+0x258>
 8000b78:	46d0      	mov	r8, sl
 8000b7a:	e77b      	b.n	8000a74 <__udivmoddi4+0x1b0>
 8000b7c:	3d02      	subs	r5, #2
 8000b7e:	4462      	add	r2, ip
 8000b80:	e732      	b.n	80009e8 <__udivmoddi4+0x124>
 8000b82:	4608      	mov	r0, r1
 8000b84:	e70a      	b.n	800099c <__udivmoddi4+0xd8>
 8000b86:	4464      	add	r4, ip
 8000b88:	3802      	subs	r0, #2
 8000b8a:	e742      	b.n	8000a12 <__udivmoddi4+0x14e>

08000b8c <__aeabi_idiv0>:
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <HAL_TIM_PeriodElapsedCallback>:
uint32_t tiempo_inicio;
uint32_t tiempo_actual;
uint32_t tdiff;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	timer_counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000b98:	4b41      	ldr	r3, [pc, #260]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b40      	ldr	r3, [pc, #256]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000ba2:	801a      	strh	r2, [r3, #0]
	if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 8000ba4:	4b3e      	ldr	r3, [pc, #248]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f003 0310 	and.w	r3, r3, #16
 8000bae:	2b10      	cmp	r3, #16
 8000bb0:	d109      	bne.n	8000bc6 <HAL_TIM_PeriodElapsedCallback+0x36>
		c1-=1;
 8000bb2:	4b3d      	ldr	r3, [pc, #244]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bc2:	801a      	strh	r2, [r3, #0]
 8000bc4:	e00f      	b.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x56>
	}
	else if (!__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 8000bc6:	4b36      	ldr	r3, [pc, #216]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	2b10      	cmp	r3, #16
 8000bd2:	d008      	beq.n	8000be6 <HAL_TIM_PeriodElapsedCallback+0x56>
		c1+=1;
 8000bd4:	4b34      	ldr	r3, [pc, #208]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	3301      	adds	r3, #1
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	b21a      	sxth	r2, r3
 8000be2:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000be4:	801a      	strh	r2, [r3, #0]
	}
	if(c1<0){
 8000be6:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	da16      	bge.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x8e>
		c1=2;
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	801a      	strh	r2, [r3, #0]
		angle-=1.9251;
 8000bf6:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff fd7a 	bl	80006f4 <__aeabi_f2d>
 8000c00:	a325      	add	r3, pc, #148	; (adr r3, 8000c98 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c06:	f7ff fc15 	bl	8000434 <__aeabi_dsub>
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	460b      	mov	r3, r1
 8000c0e:	4610      	mov	r0, r2
 8000c10:	4619      	mov	r1, r3
 8000c12:	f7ff fdef 	bl	80007f4 <__aeabi_d2f>
 8000c16:	4603      	mov	r3, r0
 8000c18:	4a24      	ldr	r2, [pc, #144]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	e01a      	b.n	8000c54 <HAL_TIM_PeriodElapsedCallback+0xc4>
	}
	else if(c1>=2){
 8000c1e:	4b22      	ldr	r3, [pc, #136]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	dd15      	ble.n	8000c54 <HAL_TIM_PeriodElapsedCallback+0xc4>
		c1=0;
 8000c28:	4b1f      	ldr	r3, [pc, #124]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	801a      	strh	r2, [r3, #0]
		angle+=1.9251;
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fd5e 	bl	80006f4 <__aeabi_f2d>
 8000c38:	a317      	add	r3, pc, #92	; (adr r3, 8000c98 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3e:	f7ff fbfb 	bl	8000438 <__adddf3>
 8000c42:	4602      	mov	r2, r0
 8000c44:	460b      	mov	r3, r1
 8000c46:	4610      	mov	r0, r2
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f7ff fdd3 	bl	80007f4 <__aeabi_d2f>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	4a16      	ldr	r2, [pc, #88]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c52:	6013      	str	r3, [r2, #0]
	}
	if(angle>=360){
 8000c54:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c56:	edd3 7a00 	vldr	s15, [r3]
 8000c5a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000cb0 <HAL_TIM_PeriodElapsedCallback+0x120>
 8000c5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c66:	db04      	blt.n	8000c72 <HAL_TIM_PeriodElapsedCallback+0xe2>
		angle=0;
 8000c68:	4b10      	ldr	r3, [pc, #64]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
	}
	else if(angle<0){
		angle=359;
	}

}
 8000c70:	e00b      	b.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0xfa>
	else if(angle<0){
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c74:	edd3 7a00 	vldr	s15, [r3]
 8000c78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c80:	d400      	bmi.n	8000c84 <HAL_TIM_PeriodElapsedCallback+0xf4>
}
 8000c82:	e002      	b.n	8000c8a <HAL_TIM_PeriodElapsedCallback+0xfa>
		angle=359;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000c86:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000c88:	601a      	str	r2, [r3, #0]
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	f3af 8000 	nop.w
 8000c98:	a858793e 	.word	0xa858793e
 8000c9c:	3ffecd35 	.word	0x3ffecd35
 8000ca0:	200000e0 	.word	0x200000e0
 8000ca4:	200001b6 	.word	0x200001b6
 8000ca8:	200001b8 	.word	0x200001b8
 8000cac:	20000000 	.word	0x20000000
 8000cb0:	43b40000 	.word	0x43b40000
 8000cb4:	43b38000 	.word	0x43b38000

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cbe:	f000 fdaf 	bl	8001820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cc2:	f000 f947 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc6:	f000 fb2d 	bl	8001324 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000cca:	f000 fafb 	bl	80012c4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000cce:	f000 f993 	bl	8000ff8 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000cd2:	f000 f9f5 	bl	80010c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000cd6:	f000 fa9f 	bl	8001218 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000cda:	488b      	ldr	r0, [pc, #556]	; (8000f08 <main+0x250>)
 8000cdc:	f003 fd74 	bl	80047c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000ce0:	213c      	movs	r1, #60	; 0x3c
 8000ce2:	4889      	ldr	r0, [pc, #548]	; (8000f08 <main+0x250>)
 8000ce4:	f003 ffba 	bl	8004c5c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4888      	ldr	r0, [pc, #544]	; (8000f0c <main+0x254>)
 8000cec:	f003 fe2a 	bl	8004944 <HAL_TIM_PWM_Start>

  float Kp = 32;
 8000cf0:	f04f 4384 	mov.w	r3, #1107296256	; 0x42000000
 8000cf4:	607b      	str	r3, [r7, #4]
  float Ki = 0.4;
 8000cf6:	4b86      	ldr	r3, [pc, #536]	; (8000f10 <main+0x258>)
 8000cf8:	603b      	str	r3, [r7, #0]
  error_acum=0;
 8000cfa:	4b86      	ldr	r3, [pc, #536]	; (8000f14 <main+0x25c>)
 8000cfc:	f04f 0200 	mov.w	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tiempo_inicio=HAL_GetTick();
 8000d02:	f000 fdfd 	bl	8001900 <HAL_GetTick>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a83      	ldr	r2, [pc, #524]	; (8000f18 <main+0x260>)
 8000d0a:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Start(&hadc1);
 8000d0c:	4883      	ldr	r0, [pc, #524]	; (8000f1c <main+0x264>)
 8000d0e:	f001 f995 	bl	800203c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000d12:	2164      	movs	r1, #100	; 0x64
 8000d14:	4881      	ldr	r0, [pc, #516]	; (8000f1c <main+0x264>)
 8000d16:	f001 fa27 	bl	8002168 <HAL_ADC_PollForConversion>
	  pote_lect=HAL_ADC_GetValue(&hadc1);
 8000d1a:	4880      	ldr	r0, [pc, #512]	; (8000f1c <main+0x264>)
 8000d1c:	f001 fab3 	bl	8002286 <HAL_ADC_GetValue>
 8000d20:	4603      	mov	r3, r0
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	4b7e      	ldr	r3, [pc, #504]	; (8000f20 <main+0x268>)
 8000d26:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000d28:	487c      	ldr	r0, [pc, #496]	; (8000f1c <main+0x264>)
 8000d2a:	f001 f9ea 	bl	8002102 <HAL_ADC_Stop>
	  HAL_Delay(100);
 8000d2e:	2064      	movs	r0, #100	; 0x64
 8000d30:	f000 fdf2 	bl	8001918 <HAL_Delay>
	  pote_angle=round(0.066*pote_lect)+40;
 8000d34:	4b7a      	ldr	r3, [pc, #488]	; (8000f20 <main+0x268>)
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fcc9 	bl	80006d0 <__aeabi_i2d>
 8000d3e:	a36e      	add	r3, pc, #440	; (adr r3, 8000ef8 <main+0x240>)
 8000d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d44:	f7ff fa48 	bl	80001d8 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	ec43 2b17 	vmov	d7, r2, r3
 8000d50:	eeb0 0a47 	vmov.f32	s0, s14
 8000d54:	eef0 0a67 	vmov.f32	s1, s15
 8000d58:	f005 fcfc 	bl	8006754 <round>
 8000d5c:	ec51 0b10 	vmov	r0, r1, d0
 8000d60:	f04f 0200 	mov.w	r2, #0
 8000d64:	4b6f      	ldr	r3, [pc, #444]	; (8000f24 <main+0x26c>)
 8000d66:	f7ff fb67 	bl	8000438 <__adddf3>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	4610      	mov	r0, r2
 8000d70:	4619      	mov	r1, r3
 8000d72:	f7ff fd3f 	bl	80007f4 <__aeabi_d2f>
 8000d76:	4603      	mov	r3, r0
 8000d78:	4a6b      	ldr	r2, [pc, #428]	; (8000f28 <main+0x270>)
 8000d7a:	6013      	str	r3, [r2, #0]

	  tiempo_actual = HAL_GetTick();
 8000d7c:	f000 fdc0 	bl	8001900 <HAL_GetTick>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a6a      	ldr	r2, [pc, #424]	; (8000f2c <main+0x274>)
 8000d84:	6013      	str	r3, [r2, #0]

	  error= pote_angle - angle;
 8000d86:	4b68      	ldr	r3, [pc, #416]	; (8000f28 <main+0x270>)
 8000d88:	ed93 7a00 	vldr	s14, [r3]
 8000d8c:	4b68      	ldr	r3, [pc, #416]	; (8000f30 <main+0x278>)
 8000d8e:	edd3 7a00 	vldr	s15, [r3]
 8000d92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d96:	4b67      	ldr	r3, [pc, #412]	; (8000f34 <main+0x27c>)
 8000d98:	edc3 7a00 	vstr	s15, [r3]

	  tdiff= tiempo_actual-tiempo_inicio;
 8000d9c:	4b63      	ldr	r3, [pc, #396]	; (8000f2c <main+0x274>)
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	4b5d      	ldr	r3, [pc, #372]	; (8000f18 <main+0x260>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	4a64      	ldr	r2, [pc, #400]	; (8000f38 <main+0x280>)
 8000da8:	6013      	str	r3, [r2, #0]

	  error_acum = error_acum + error*tdiff*0.02;
 8000daa:	4b5a      	ldr	r3, [pc, #360]	; (8000f14 <main+0x25c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fca0 	bl	80006f4 <__aeabi_f2d>
 8000db4:	4604      	mov	r4, r0
 8000db6:	460d      	mov	r5, r1
 8000db8:	4b5f      	ldr	r3, [pc, #380]	; (8000f38 <main+0x280>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	ee07 3a90 	vmov	s15, r3
 8000dc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dc4:	4b5b      	ldr	r3, [pc, #364]	; (8000f34 <main+0x27c>)
 8000dc6:	edd3 7a00 	vldr	s15, [r3]
 8000dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dce:	ee17 0a90 	vmov	r0, s15
 8000dd2:	f7ff fc8f 	bl	80006f4 <__aeabi_f2d>
 8000dd6:	a34a      	add	r3, pc, #296	; (adr r3, 8000f00 <main+0x248>)
 8000dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ddc:	f7ff f9fc 	bl	80001d8 <__aeabi_dmul>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	4620      	mov	r0, r4
 8000de6:	4629      	mov	r1, r5
 8000de8:	f7ff fb26 	bl	8000438 <__adddf3>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f7ff fcfe 	bl	80007f4 <__aeabi_d2f>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a46      	ldr	r2, [pc, #280]	; (8000f14 <main+0x25c>)
 8000dfc:	6013      	str	r3, [r2, #0]

	  if(error_acum>900){
 8000dfe:	4b45      	ldr	r3, [pc, #276]	; (8000f14 <main+0x25c>)
 8000e00:	edd3 7a00 	vldr	s15, [r3]
 8000e04:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8000f3c <main+0x284>
 8000e08:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e10:	dd02      	ble.n	8000e18 <main+0x160>
	  		  error_acum=800;
 8000e12:	4b40      	ldr	r3, [pc, #256]	; (8000f14 <main+0x25c>)
 8000e14:	4a4a      	ldr	r2, [pc, #296]	; (8000f40 <main+0x288>)
 8000e16:	601a      	str	r2, [r3, #0]
	  }
	  if(error_acum<-900){
 8000e18:	4b3e      	ldr	r3, [pc, #248]	; (8000f14 <main+0x25c>)
 8000e1a:	edd3 7a00 	vldr	s15, [r3]
 8000e1e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8000f44 <main+0x28c>
 8000e22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e2a:	d502      	bpl.n	8000e32 <main+0x17a>
		  error_acum=-800;
 8000e2c:	4b39      	ldr	r3, [pc, #228]	; (8000f14 <main+0x25c>)
 8000e2e:	4a46      	ldr	r2, [pc, #280]	; (8000f48 <main+0x290>)
 8000e30:	601a      	str	r2, [r3, #0]
	  }

	  act=(int)(round(Kp*error + Ki*error_acum));
 8000e32:	4b40      	ldr	r3, [pc, #256]	; (8000f34 <main+0x27c>)
 8000e34:	ed93 7a00 	vldr	s14, [r3]
 8000e38:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e40:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <main+0x25c>)
 8000e42:	edd3 6a00 	vldr	s13, [r3]
 8000e46:	edd7 7a00 	vldr	s15, [r7]
 8000e4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e52:	ee17 0a90 	vmov	r0, s15
 8000e56:	f7ff fc4d 	bl	80006f4 <__aeabi_f2d>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	ec43 2b10 	vmov	d0, r2, r3
 8000e62:	f005 fc77 	bl	8006754 <round>
 8000e66:	ec53 2b10 	vmov	r2, r3, d0
 8000e6a:	4610      	mov	r0, r2
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f7ff fc99 	bl	80007a4 <__aeabi_d2iz>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4a35      	ldr	r2, [pc, #212]	; (8000f4c <main+0x294>)
 8000e76:	6013      	str	r3, [r2, #0]

	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, 1); //enable
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e82:	f002 fa37 	bl	80032f4 <HAL_GPIO_WritePin>


	  if(act>=0){
 8000e86:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <main+0x294>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db13      	blt.n	8000eb6 <main+0x1fe>
		  if(act>999){
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <main+0x294>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000e96:	db03      	blt.n	8000ea0 <main+0x1e8>
			  act=999;
 8000e98:	4b2c      	ldr	r3, [pc, #176]	; (8000f4c <main+0x294>)
 8000e9a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e9e:	601a      	str	r2, [r3, #0]
		  }
		  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 0);//1 CW   0 contrareloj
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea6:	482a      	ldr	r0, [pc, #168]	; (8000f50 <main+0x298>)
 8000ea8:	f002 fa24 	bl	80032f4 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,act);
 8000eac:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <main+0x294>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <main+0x254>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	635a      	str	r2, [r3, #52]	; 0x34

	  }
	  if(act<0){
 8000eb6:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <main+0x294>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f6bf af21 	bge.w	8000d02 <main+0x4a>
		  act=-act;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <main+0x294>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	425b      	negs	r3, r3
 8000ec6:	4a21      	ldr	r2, [pc, #132]	; (8000f4c <main+0x294>)
 8000ec8:	6013      	str	r3, [r2, #0]
		  if(act>999){
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <main+0x294>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ed2:	db03      	blt.n	8000edc <main+0x224>
			  act=999;
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	; (8000f4c <main+0x294>)
 8000ed6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eda:	601a      	str	r2, [r3, #0]
		  }

		  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, 1);//1 CW   0 contrareloj
 8000edc:	2201      	movs	r2, #1
 8000ede:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ee2:	481b      	ldr	r0, [pc, #108]	; (8000f50 <main+0x298>)
 8000ee4:	f002 fa06 	bl	80032f4 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,act);
 8000ee8:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <main+0x294>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b07      	ldr	r3, [pc, #28]	; (8000f0c <main+0x254>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	635a      	str	r2, [r3, #52]	; 0x34
	  tiempo_inicio=HAL_GetTick();
 8000ef2:	e706      	b.n	8000d02 <main+0x4a>
 8000ef4:	f3af 8000 	nop.w
 8000ef8:	4189374c 	.word	0x4189374c
 8000efc:	3fb0e560 	.word	0x3fb0e560
 8000f00:	47ae147b 	.word	0x47ae147b
 8000f04:	3f947ae1 	.word	0x3f947ae1
 8000f08:	200000e0 	.word	0x200000e0
 8000f0c:	20000094 	.word	0x20000094
 8000f10:	3ecccccd 	.word	0x3ecccccd
 8000f14:	200001c4 	.word	0x200001c4
 8000f18:	200001cc 	.word	0x200001cc
 8000f1c:	2000002c 	.word	0x2000002c
 8000f20:	200001b4 	.word	0x200001b4
 8000f24:	40440000 	.word	0x40440000
 8000f28:	200001bc 	.word	0x200001bc
 8000f2c:	200001d0 	.word	0x200001d0
 8000f30:	20000000 	.word	0x20000000
 8000f34:	200001c0 	.word	0x200001c0
 8000f38:	200001d4 	.word	0x200001d4
 8000f3c:	44610000 	.word	0x44610000
 8000f40:	44480000 	.word	0x44480000
 8000f44:	c4610000 	.word	0xc4610000
 8000f48:	c4480000 	.word	0xc4480000
 8000f4c:	200001c8 	.word	0x200001c8
 8000f50:	48000400 	.word	0x48000400

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b096      	sub	sp, #88	; 0x58
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	2244      	movs	r2, #68	; 0x44
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f005 fbc9 	bl	80066fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	60da      	str	r2, [r3, #12]
 8000f74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f7a:	f002 f9e1 	bl	8003340 <HAL_PWREx_ControlVoltageScaling>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f84:	f000 fa4e 	bl	8001424 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f92:	2340      	movs	r3, #64	; 0x40
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000faa:	2302      	movs	r3, #2
 8000fac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 fa18 	bl	80033ec <HAL_RCC_OscConfig>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fc2:	f000 fa2f 	bl	8001424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc6:	230f      	movs	r3, #15
 8000fc8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	2104      	movs	r1, #4
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fe18 	bl	8003c14 <HAL_RCC_ClockConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fea:	f000 fa1b 	bl	8001424 <Error_Handler>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3758      	adds	r7, #88	; 0x58
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b086      	sub	sp, #24
 8000ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	463b      	mov	r3, r7
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800100e:	4b29      	ldr	r3, [pc, #164]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <MX_ADC1_Init+0xc0>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800101a:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <MX_ADC1_Init+0xbc>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102c:	4b21      	ldr	r3, [pc, #132]	; (80010b4 <MX_ADC1_Init+0xbc>)
 800102e:	2204      	movs	r2, #4
 8001030:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001034:	2200      	movs	r2, #0
 8001036:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001038:	4b1e      	ldr	r3, [pc, #120]	; (80010b4 <MX_ADC1_Init+0xbc>)
 800103a:	2200      	movs	r2, #0
 800103c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800103e:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001040:	2201      	movs	r2, #1
 8001042:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001044:	4b1b      	ldr	r3, [pc, #108]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b19      	ldr	r3, [pc, #100]	; (80010b4 <MX_ADC1_Init+0xbc>)
 800104e:	2200      	movs	r2, #0
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001054:	2200      	movs	r2, #0
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001058:	4b16      	ldr	r3, [pc, #88]	; (80010b4 <MX_ADC1_Init+0xbc>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001062:	2200      	movs	r2, #0
 8001064:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001066:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106e:	4811      	ldr	r0, [pc, #68]	; (80010b4 <MX_ADC1_Init+0xbc>)
 8001070:	f000 fe9e 	bl	8001db0 <HAL_ADC_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800107a:	f000 f9d3 	bl	8001424 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800107e:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_ADC1_Init+0xc4>)
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001082:	2306      	movs	r3, #6
 8001084:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001086:	2300      	movs	r3, #0
 8001088:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800108a:	237f      	movs	r3, #127	; 0x7f
 800108c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800108e:	2304      	movs	r3, #4
 8001090:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001096:	463b      	mov	r3, r7
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_ADC1_Init+0xbc>)
 800109c:	f001 f900 	bl	80022a0 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80010a6:	f000 f9bd 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000002c 	.word	0x2000002c
 80010b8:	50040000 	.word	0x50040000
 80010bc:	14f00020 	.word	0x14f00020

080010c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b09a      	sub	sp, #104	; 0x68
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
 80010f0:	615a      	str	r2, [r3, #20]
 80010f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	222c      	movs	r2, #44	; 0x2c
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f005 fafd 	bl	80066fa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001100:	4b43      	ldr	r3, [pc, #268]	; (8001210 <MX_TIM1_Init+0x150>)
 8001102:	4a44      	ldr	r2, [pc, #272]	; (8001214 <MX_TIM1_Init+0x154>)
 8001104:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80;
 8001106:	4b42      	ldr	r3, [pc, #264]	; (8001210 <MX_TIM1_Init+0x150>)
 8001108:	2250      	movs	r2, #80	; 0x50
 800110a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110c:	4b40      	ldr	r3, [pc, #256]	; (8001210 <MX_TIM1_Init+0x150>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8001112:	4b3f      	ldr	r3, [pc, #252]	; (8001210 <MX_TIM1_Init+0x150>)
 8001114:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001118:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111a:	4b3d      	ldr	r3, [pc, #244]	; (8001210 <MX_TIM1_Init+0x150>)
 800111c:	2200      	movs	r2, #0
 800111e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001120:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <MX_TIM1_Init+0x150>)
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001126:	4b3a      	ldr	r3, [pc, #232]	; (8001210 <MX_TIM1_Init+0x150>)
 8001128:	2200      	movs	r2, #0
 800112a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800112c:	4838      	ldr	r0, [pc, #224]	; (8001210 <MX_TIM1_Init+0x150>)
 800112e:	f003 faf3 	bl	8004718 <HAL_TIM_Base_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001138:	f000 f974 	bl	8001424 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001140:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001142:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001146:	4619      	mov	r1, r3
 8001148:	4831      	ldr	r0, [pc, #196]	; (8001210 <MX_TIM1_Init+0x150>)
 800114a:	f004 f84b 	bl	80051e4 <HAL_TIM_ConfigClockSource>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001154:	f000 f966 	bl	8001424 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001158:	482d      	ldr	r0, [pc, #180]	; (8001210 <MX_TIM1_Init+0x150>)
 800115a:	f003 fb91 	bl	8004880 <HAL_TIM_PWM_Init>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001164:	f000 f95e 	bl	8001424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001168:	2300      	movs	r3, #0
 800116a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001170:	2300      	movs	r3, #0
 8001172:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001174:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001178:	4619      	mov	r1, r3
 800117a:	4825      	ldr	r0, [pc, #148]	; (8001210 <MX_TIM1_Init+0x150>)
 800117c:	f004 fcd0 	bl	8005b20 <HAL_TIMEx_MasterConfigSynchronization>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001186:	f000 f94d 	bl	8001424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800118a:	2360      	movs	r3, #96	; 0x60
 800118c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001192:	2300      	movs	r3, #0
 8001194:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001196:	2300      	movs	r3, #0
 8001198:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4818      	ldr	r0, [pc, #96]	; (8001210 <MX_TIM1_Init+0x150>)
 80011b0:	f003 ff04 	bl	8004fbc <HAL_TIM_PWM_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011ba:	f000 f933 	bl	8001424 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80011e4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	4619      	mov	r1, r3
 80011f2:	4807      	ldr	r0, [pc, #28]	; (8001210 <MX_TIM1_Init+0x150>)
 80011f4:	f004 fd02 	bl	8005bfc <HAL_TIMEx_ConfigBreakDeadTime>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80011fe:	f000 f911 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001202:	4803      	ldr	r0, [pc, #12]	; (8001210 <MX_TIM1_Init+0x150>)
 8001204:	f000 fa08 	bl	8001618 <HAL_TIM_MspPostInit>

}
 8001208:	bf00      	nop
 800120a:	3768      	adds	r7, #104	; 0x68
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000094 	.word	0x20000094
 8001214:	40012c00 	.word	0x40012c00

08001218 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	2224      	movs	r2, #36	; 0x24
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f005 fa67 	bl	80066fa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	463b      	mov	r3, r7
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001236:	4b21      	ldr	r3, [pc, #132]	; (80012bc <MX_TIM3_Init+0xa4>)
 8001238:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <MX_TIM3_Init+0xa8>)
 800123a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <MX_TIM3_Init+0xa4>)
 800123e:	2200      	movs	r2, #0
 8001240:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001242:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <MX_TIM3_Init+0xa4>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500-1;
 8001248:	4b1c      	ldr	r3, [pc, #112]	; (80012bc <MX_TIM3_Init+0xa4>)
 800124a:	f240 12f3 	movw	r2, #499	; 0x1f3
 800124e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001250:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_TIM3_Init+0xa4>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001256:	4b19      	ldr	r3, [pc, #100]	; (80012bc <MX_TIM3_Init+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800125c:	2303      	movs	r3, #3
 800125e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001260:	2302      	movs	r3, #2
 8001262:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001264:	2301      	movs	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001268:	2300      	movs	r3, #0
 800126a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001270:	2302      	movs	r3, #2
 8001272:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001274:	2301      	movs	r3, #1
 8001276:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001278:	2300      	movs	r3, #0
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800127c:	2300      	movs	r3, #0
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_TIM3_Init+0xa4>)
 8001288:	f003 fc42 	bl	8004b10 <HAL_TIM_Encoder_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001292:	f000 f8c7 	bl	8001424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_TIM3_Init+0xa4>)
 80012a4:	f004 fc3c 	bl	8005b20 <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80012ae:	f000 f8b9 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3730      	adds	r7, #48	; 0x30
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200000e0 	.word	0x200000e0
 80012c0:	40000400 	.word	0x40000400

080012c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c8:	4b14      	ldr	r3, [pc, #80]	; (800131c <MX_USART2_UART_Init+0x58>)
 80012ca:	4a15      	ldr	r2, [pc, #84]	; (8001320 <MX_USART2_UART_Init+0x5c>)
 80012cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ce:	4b13      	ldr	r3, [pc, #76]	; (800131c <MX_USART2_UART_Init+0x58>)
 80012d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <MX_USART2_UART_Init+0x58>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	; (800131c <MX_USART2_UART_Init+0x58>)
 80012de:	2200      	movs	r2, #0
 80012e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <MX_USART2_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <MX_USART2_UART_Init+0x58>)
 80012ea:	220c      	movs	r2, #12
 80012ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <MX_USART2_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f4:	4b09      	ldr	r3, [pc, #36]	; (800131c <MX_USART2_UART_Init+0x58>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <MX_USART2_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001300:	4b06      	ldr	r3, [pc, #24]	; (800131c <MX_USART2_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001306:	4805      	ldr	r0, [pc, #20]	; (800131c <MX_USART2_UART_Init+0x58>)
 8001308:	f004 fd0e 	bl	8005d28 <HAL_UART_Init>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001312:	f000 f887 	bl	8001424 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	2000012c 	.word	0x2000012c
 8001320:	40004400 	.word	0x40004400

08001324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	60da      	str	r2, [r3, #12]
 8001338:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <MX_GPIO_Init+0xf4>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	4a36      	ldr	r2, [pc, #216]	; (8001418 <MX_GPIO_Init+0xf4>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001346:	4b34      	ldr	r3, [pc, #208]	; (8001418 <MX_GPIO_Init+0xf4>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <MX_GPIO_Init+0xf4>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	4a30      	ldr	r2, [pc, #192]	; (8001418 <MX_GPIO_Init+0xf4>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <MX_GPIO_Init+0xf4>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <MX_GPIO_Init+0xf4>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	4a2a      	ldr	r2, [pc, #168]	; (8001418 <MX_GPIO_Init+0xf4>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001376:	4b28      	ldr	r3, [pc, #160]	; (8001418 <MX_GPIO_Init+0xf4>)
 8001378:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	4b25      	ldr	r3, [pc, #148]	; (8001418 <MX_GPIO_Init+0xf4>)
 8001384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001386:	4a24      	ldr	r2, [pc, #144]	; (8001418 <MX_GPIO_Init+0xf4>)
 8001388:	f043 0302 	orr.w	r3, r3, #2
 800138c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <MX_GPIO_Init+0xf4>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD4_Pin|EN_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 7108 	mov.w	r1, #544	; 0x220
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f001 ffa6 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80013ae:	481b      	ldr	r0, [pc, #108]	; (800141c <MX_GPIO_Init+0xf8>)
 80013b0:	f001 ffa0 	bl	80032f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ba:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4619      	mov	r1, r3
 80013ca:	4815      	ldr	r0, [pc, #84]	; (8001420 <MX_GPIO_Init+0xfc>)
 80013cc:	f001 fe18 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin EN_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|EN_Pin;
 80013d0:	f44f 7308 	mov.w	r3, #544	; 0x220
 80013d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0314 	add.w	r3, r7, #20
 80013e6:	4619      	mov	r1, r3
 80013e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ec:	f001 fe08 	bl	8003000 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 80013f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f6:	2301      	movs	r3, #1
 80013f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_GPIO_Init+0xf8>)
 800140a:	f001 fdf9 	bl	8003000 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40021000 	.word	0x40021000
 800141c:	48000400 	.word	0x48000400
 8001420:	48000800 	.word	0x48000800

08001424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	e7fe      	b.n	800142c <Error_Handler+0x8>
	...

08001430 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_MspInit+0x44>)
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	4a0e      	ldr	r2, [pc, #56]	; (8001474 <HAL_MspInit+0x44>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6613      	str	r3, [r2, #96]	; 0x60
 8001442:	4b0c      	ldr	r3, [pc, #48]	; (8001474 <HAL_MspInit+0x44>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	607b      	str	r3, [r7, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b09      	ldr	r3, [pc, #36]	; (8001474 <HAL_MspInit+0x44>)
 8001450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001452:	4a08      	ldr	r2, [pc, #32]	; (8001474 <HAL_MspInit+0x44>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001458:	6593      	str	r3, [r2, #88]	; 0x58
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_MspInit+0x44>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	40021000 	.word	0x40021000

08001478 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b0a4      	sub	sp, #144	; 0x90
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001480:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
 800148c:	60da      	str	r2, [r3, #12]
 800148e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	2268      	movs	r2, #104	; 0x68
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f005 f92e 	bl	80066fa <memset>
  if(hadc->Instance==ADC1)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a26      	ldr	r2, [pc, #152]	; (800153c <HAL_ADC_MspInit+0xc4>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d145      	bne.n	8001534 <HAL_ADC_MspInit+0xbc>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80014ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80014b2:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80014bc:	2308      	movs	r3, #8
 80014be:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80014c0:	2307      	movs	r3, #7
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80014c4:	2302      	movs	r3, #2
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80014cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014d0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d2:	f107 0314 	add.w	r3, r7, #20
 80014d6:	4618      	mov	r0, r3
 80014d8:	f002 fdc0 	bl	800405c <HAL_RCCEx_PeriphCLKConfig>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80014e2:	f7ff ff9f 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014e6:	4b16      	ldr	r3, [pc, #88]	; (8001540 <HAL_ADC_MspInit+0xc8>)
 80014e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ea:	4a15      	ldr	r2, [pc, #84]	; (8001540 <HAL_ADC_MspInit+0xc8>)
 80014ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014f2:	4b13      	ldr	r3, [pc, #76]	; (8001540 <HAL_ADC_MspInit+0xc8>)
 80014f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <HAL_ADC_MspInit+0xc8>)
 8001500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001502:	4a0f      	ldr	r2, [pc, #60]	; (8001540 <HAL_ADC_MspInit+0xc8>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150a:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <HAL_ADC_MspInit+0xc8>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001516:	2301      	movs	r3, #1
 8001518:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800151a:	230b      	movs	r3, #11
 800151c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001526:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800152a:	4619      	mov	r1, r3
 800152c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001530:	f001 fd66 	bl	8003000 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001534:	bf00      	nop
 8001536:	3790      	adds	r7, #144	; 0x90
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	50040000 	.word	0x50040000
 8001540:	40021000 	.word	0x40021000

08001544 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_TIM_Base_MspInit+0x38>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d10b      	bne.n	800156e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_TIM_Base_MspInit+0x3c>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_TIM_Base_MspInit+0x3c>)
 800155c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001560:	6613      	str	r3, [r2, #96]	; 0x60
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_TIM_Base_MspInit+0x3c>)
 8001564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40012c00 	.word	0x40012c00
 8001580:	40021000 	.word	0x40021000

08001584 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	; 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <HAL_TIM_Encoder_MspInit+0x8c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d130      	bne.n	8001608 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_TIM_Encoder_MspInit+0x90>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <HAL_TIM_Encoder_MspInit+0x90>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6593      	str	r3, [r2, #88]	; 0x58
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_TIM_Encoder_MspInit+0x90>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <HAL_TIM_Encoder_MspInit+0x90>)
 80015c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c2:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_TIM_Encoder_MspInit+0x90>)
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_TIM_Encoder_MspInit+0x90>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	f003 0301 	and.w	r3, r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = CHAN_A_Pin|CHAN_B_Pin;
 80015d6:	23c0      	movs	r3, #192	; 0xc0
 80015d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015da:	2302      	movs	r3, #2
 80015dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	2300      	movs	r3, #0
 80015e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80015e6:	2302      	movs	r3, #2
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 0314 	add.w	r3, r7, #20
 80015ee:	4619      	mov	r1, r3
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f4:	f001 fd04 	bl	8003000 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2100      	movs	r1, #0
 80015fc:	201d      	movs	r0, #29
 80015fe:	f001 fcc8 	bl	8002f92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001602:	201d      	movs	r0, #29
 8001604:	f001 fce1 	bl	8002fca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001608:	bf00      	nop
 800160a:	3728      	adds	r7, #40	; 0x28
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40000400 	.word	0x40000400
 8001614:	40021000 	.word	0x40021000

08001618 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_TIM_MspPostInit+0x68>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d11d      	bne.n	8001676 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b12      	ldr	r3, [pc, #72]	; (8001684 <HAL_TIM_MspPostInit+0x6c>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163e:	4a11      	ldr	r2, [pc, #68]	; (8001684 <HAL_TIM_MspPostInit+0x6c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001646:	4b0f      	ldr	r3, [pc, #60]	; (8001684 <HAL_TIM_MspPostInit+0x6c>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_Pin;
 8001652:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001656:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001664:	2301      	movs	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	4619      	mov	r1, r3
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f001 fcc5 	bl	8003000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001676:	bf00      	nop
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40012c00 	.word	0x40012c00
 8001684:	40021000 	.word	0x40021000

08001688 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b0a4      	sub	sp, #144	; 0x90
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001690:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2268      	movs	r2, #104	; 0x68
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f005 f826 	bl	80066fa <memset>
  if(huart->Instance==USART2)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a21      	ldr	r2, [pc, #132]	; (8001738 <HAL_UART_MspInit+0xb0>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d13a      	bne.n	800172e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016b8:	2302      	movs	r3, #2
 80016ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016bc:	2300      	movs	r3, #0
 80016be:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4618      	mov	r0, r3
 80016c6:	f002 fcc9 	bl	800405c <HAL_RCCEx_PeriphCLKConfig>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016d0:	f7ff fea8 	bl	8001424 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <HAL_UART_MspInit+0xb4>)
 80016d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d8:	4a18      	ldr	r2, [pc, #96]	; (800173c <HAL_UART_MspInit+0xb4>)
 80016da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016de:	6593      	str	r3, [r2, #88]	; 0x58
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <HAL_UART_MspInit+0xb4>)
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e8:	613b      	str	r3, [r7, #16]
 80016ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <HAL_UART_MspInit+0xb4>)
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f0:	4a12      	ldr	r2, [pc, #72]	; (800173c <HAL_UART_MspInit+0xb4>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <HAL_UART_MspInit+0xb4>)
 80016fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001704:	230c      	movs	r3, #12
 8001706:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001714:	2303      	movs	r3, #3
 8001716:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171a:	2307      	movs	r3, #7
 800171c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f001 fc69 	bl	8003000 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800172e:	bf00      	nop
 8001730:	3790      	adds	r7, #144	; 0x90
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40004400 	.word	0x40004400
 800173c:	40021000 	.word	0x40021000

08001740 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001744:	e7fe      	b.n	8001744 <NMI_Handler+0x4>

08001746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001746:	b480      	push	{r7}
 8001748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800174a:	e7fe      	b.n	800174a <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <MemManage_Handler+0x4>

08001752 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <BusFault_Handler+0x4>

08001758 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <UsageFault_Handler+0x4>

0800175e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800177a:	b480      	push	{r7}
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800178c:	f000 f8a4 	bl	80018d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	bd80      	pop	{r7, pc}

08001794 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <TIM3_IRQHandler+0x10>)
 800179a:	f003 fb0d 	bl	8004db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200000e0 	.word	0x200000e0

080017a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <SystemInit+0x20>)
 80017ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <SystemInit+0x20>)
 80017b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <Reset_Handler>:
 80017cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001804 <LoopForever+0x2>
 80017d0:	f7ff ffea 	bl	80017a8 <SystemInit>
 80017d4:	480c      	ldr	r0, [pc, #48]	; (8001808 <LoopForever+0x6>)
 80017d6:	490d      	ldr	r1, [pc, #52]	; (800180c <LoopForever+0xa>)
 80017d8:	4a0d      	ldr	r2, [pc, #52]	; (8001810 <LoopForever+0xe>)
 80017da:	2300      	movs	r3, #0
 80017dc:	e002      	b.n	80017e4 <LoopCopyDataInit>

080017de <CopyDataInit>:
 80017de:	58d4      	ldr	r4, [r2, r3]
 80017e0:	50c4      	str	r4, [r0, r3]
 80017e2:	3304      	adds	r3, #4

080017e4 <LoopCopyDataInit>:
 80017e4:	18c4      	adds	r4, r0, r3
 80017e6:	428c      	cmp	r4, r1
 80017e8:	d3f9      	bcc.n	80017de <CopyDataInit>
 80017ea:	4a0a      	ldr	r2, [pc, #40]	; (8001814 <LoopForever+0x12>)
 80017ec:	4c0a      	ldr	r4, [pc, #40]	; (8001818 <LoopForever+0x16>)
 80017ee:	2300      	movs	r3, #0
 80017f0:	e001      	b.n	80017f6 <LoopFillZerobss>

080017f2 <FillZerobss>:
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	3204      	adds	r2, #4

080017f6 <LoopFillZerobss>:
 80017f6:	42a2      	cmp	r2, r4
 80017f8:	d3fb      	bcc.n	80017f2 <FillZerobss>
 80017fa:	f004 ff87 	bl	800670c <__libc_init_array>
 80017fe:	f7ff fa5b 	bl	8000cb8 <main>

08001802 <LoopForever>:
 8001802:	e7fe      	b.n	8001802 <LoopForever>
 8001804:	20028000 	.word	0x20028000
 8001808:	20000000 	.word	0x20000000
 800180c:	20000010 	.word	0x20000010
 8001810:	08006854 	.word	0x08006854
 8001814:	20000010 	.word	0x20000010
 8001818:	200001dc 	.word	0x200001dc

0800181c <ADC1_IRQHandler>:
 800181c:	e7fe      	b.n	800181c <ADC1_IRQHandler>
	...

08001820 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800182a:	4b0c      	ldr	r3, [pc, #48]	; (800185c <HAL_Init+0x3c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a0b      	ldr	r2, [pc, #44]	; (800185c <HAL_Init+0x3c>)
 8001830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001834:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001836:	2003      	movs	r0, #3
 8001838:	f001 fba0 	bl	8002f7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800183c:	2000      	movs	r0, #0
 800183e:	f000 f80f 	bl	8001860 <HAL_InitTick>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	71fb      	strb	r3, [r7, #7]
 800184c:	e001      	b.n	8001852 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800184e:	f7ff fdef 	bl	8001430 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001852:	79fb      	ldrb	r3, [r7, #7]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3708      	adds	r7, #8
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40022000 	.word	0x40022000

08001860 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <HAL_InitTick+0x6c>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d023      	beq.n	80018bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <HAL_InitTick+0x70>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <HAL_InitTick+0x6c>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4619      	mov	r1, r3
 800187e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001882:	fbb3 f3f1 	udiv	r3, r3, r1
 8001886:	fbb2 f3f3 	udiv	r3, r2, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f001 fbab 	bl	8002fe6 <HAL_SYSTICK_Config>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d10f      	bne.n	80018b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d809      	bhi.n	80018b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f001 fb75 	bl	8002f92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018a8:	4a0a      	ldr	r2, [pc, #40]	; (80018d4 <HAL_InitTick+0x74>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	e007      	b.n	80018c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	73fb      	strb	r3, [r7, #15]
 80018b4:	e004      	b.n	80018c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	73fb      	strb	r3, [r7, #15]
 80018ba:	e001      	b.n	80018c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	2000000c 	.word	0x2000000c
 80018d0:	20000004 	.word	0x20000004
 80018d4:	20000008 	.word	0x20000008

080018d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x20>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_IncTick+0x24>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	4a04      	ldr	r2, [pc, #16]	; (80018fc <HAL_IncTick+0x24>)
 80018ea:	6013      	str	r3, [r2, #0]
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	2000000c 	.word	0x2000000c
 80018fc:	200001d8 	.word	0x200001d8

08001900 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b03      	ldr	r3, [pc, #12]	; (8001914 <HAL_GetTick+0x14>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	200001d8 	.word	0x200001d8

08001918 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff ffee 	bl	8001900 <HAL_GetTick>
 8001924:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001930:	d005      	beq.n	800193e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_Delay+0x44>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4413      	add	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193e:	bf00      	nop
 8001940:	f7ff ffde 	bl	8001900 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	429a      	cmp	r2, r3
 800194e:	d8f7      	bhi.n	8001940 <HAL_Delay+0x28>
  {
  }
}
 8001950:	bf00      	nop
 8001952:	bf00      	nop
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	2000000c 	.word	0x2000000c

08001960 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	431a      	orrs	r2, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	609a      	str	r2, [r3, #8]
}
 800197a:	bf00      	nop
 800197c:	370c      	adds	r7, #12
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
 800198e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	609a      	str	r2, [r3, #8]
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019bc:	4618      	mov	r0, r3
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
 80019d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	3360      	adds	r3, #96	; 0x60
 80019da:	461a      	mov	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4413      	add	r3, r2
 80019e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b08      	ldr	r3, [pc, #32]	; (8001a0c <LL_ADC_SetOffset+0x44>)
 80019ea:	4013      	ands	r3, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	4313      	orrs	r3, r2
 80019f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001a00:	bf00      	nop
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	03fff000 	.word	0x03fff000

08001a10 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3360      	adds	r3, #96	; 0x60
 8001a1e:	461a      	mov	r2, r3
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b087      	sub	sp, #28
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	3360      	adds	r3, #96	; 0x60
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	431a      	orrs	r2, r3
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a66:	bf00      	nop
 8001a68:	371c      	adds	r7, #28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr

08001a72 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001a72:	b480      	push	{r7}
 8001a74:	b083      	sub	sp, #12
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
 8001a7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	695b      	ldr	r3, [r3, #20]
 8001a80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	615a      	str	r2, [r3, #20]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001aac:	2301      	movs	r3, #1
 8001aae:	e000      	b.n	8001ab2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b087      	sub	sp, #28
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3330      	adds	r3, #48	; 0x30
 8001ace:	461a      	mov	r2, r3
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	0a1b      	lsrs	r3, r3, #8
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	4413      	add	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f003 031f 	and.w	r3, r3, #31
 8001ae8:	211f      	movs	r1, #31
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	43db      	mvns	r3, r3
 8001af0:	401a      	ands	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	0e9b      	lsrs	r3, r3, #26
 8001af6:	f003 011f 	and.w	r1, r3, #31
 8001afa:	68bb      	ldr	r3, [r7, #8]
 8001afc:	f003 031f 	and.w	r3, r3, #31
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	431a      	orrs	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b0a:	bf00      	nop
 8001b0c:	371c      	adds	r7, #28
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b087      	sub	sp, #28
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	60f8      	str	r0, [r7, #12]
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	3314      	adds	r3, #20
 8001b26:	461a      	mov	r2, r3
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	0e5b      	lsrs	r3, r3, #25
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	4413      	add	r3, r2
 8001b34:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	0d1b      	lsrs	r3, r3, #20
 8001b3e:	f003 031f 	and.w	r3, r3, #31
 8001b42:	2107      	movs	r1, #7
 8001b44:	fa01 f303 	lsl.w	r3, r1, r3
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	0d1b      	lsrs	r3, r3, #20
 8001b50:	f003 031f 	and.w	r3, r3, #31
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b60:	bf00      	nop
 8001b62:	371c      	adds	r7, #28
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b84:	43db      	mvns	r3, r3
 8001b86:	401a      	ands	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0318 	and.w	r3, r3, #24
 8001b8e:	4908      	ldr	r1, [pc, #32]	; (8001bb0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b90:	40d9      	lsrs	r1, r3
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	400b      	ands	r3, r1
 8001b96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	0007ffff 	.word	0x0007ffff

08001bb4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bc4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6093      	str	r3, [r2, #8]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001be8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bec:	d101      	bne.n	8001bf2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e000      	b.n	8001bf4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c10:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c6c:	bf00      	nop
 8001c6e:	370c      	adds	r7, #12
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c8c:	f043 0202 	orr.w	r2, r3, #2
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <LL_ADC_IsEnabled+0x18>
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <LL_ADC_IsEnabled+0x1a>
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d101      	bne.n	8001cde <LL_ADC_IsDisableOngoing+0x18>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e000      	b.n	8001ce0 <LL_ADC_IsDisableOngoing+0x1a>
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001cfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d00:	f043 0204 	orr.w	r2, r3, #4
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr

08001d14 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d28:	f043 0210 	orr.w	r2, r3, #16
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001d30:	bf00      	nop
 8001d32:	370c      	adds	r7, #12
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d101      	bne.n	8001d54 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d50:	2301      	movs	r3, #1
 8001d52:	e000      	b.n	8001d56 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	370c      	adds	r7, #12
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr

08001d62 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001d62:	b480      	push	{r7}
 8001d64:	b083      	sub	sp, #12
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001d72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d76:	f043 0220 	orr.w	r2, r3, #32
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d101      	bne.n	8001da2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d101      	bne.n	8001dca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e129      	b.n	800201e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f7ff fb4d 	bl	8001478 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fef1 	bl	8001bd8 <LL_ADC_IsDeepPowerDownEnabled>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d004      	beq.n	8001e06 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fed7 	bl	8001bb4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff ff0c 	bl	8001c28 <LL_ADC_IsInternalRegulatorEnabled>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d115      	bne.n	8001e42 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fef0 	bl	8001c00 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e20:	4b81      	ldr	r3, [pc, #516]	; (8002028 <HAL_ADC_Init+0x278>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	099b      	lsrs	r3, r3, #6
 8001e26:	4a81      	ldr	r2, [pc, #516]	; (800202c <HAL_ADC_Init+0x27c>)
 8001e28:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2c:	099b      	lsrs	r3, r3, #6
 8001e2e:	3301      	adds	r3, #1
 8001e30:	005b      	lsls	r3, r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e34:	e002      	b.n	8001e3c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f9      	bne.n	8001e36 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff feee 	bl	8001c28 <LL_ADC_IsInternalRegulatorEnabled>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10d      	bne.n	8001e6e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	f043 0210 	orr.w	r2, r3, #16
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e62:	f043 0201 	orr.w	r2, r3, #1
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff ff62 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 8001e78:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f040 80c2 	bne.w	800200c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f040 80be 	bne.w	800200c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e94:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e98:	f043 0202 	orr.w	r2, r3, #2
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fefb 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10b      	bne.n	8001ec8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb0:	485f      	ldr	r0, [pc, #380]	; (8002030 <HAL_ADC_Init+0x280>)
 8001eb2:	f7ff fef5 	bl	8001ca0 <LL_ADC_IsEnabled>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d105      	bne.n	8001ec8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	485c      	ldr	r0, [pc, #368]	; (8002034 <HAL_ADC_Init+0x284>)
 8001ec4:	f7ff fd4c 	bl	8001960 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7e5b      	ldrb	r3, [r3, #25]
 8001ecc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ed2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001ed8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001ede:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d106      	bne.n	8001f04 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	3b01      	subs	r3, #1
 8001efc:	045b      	lsls	r3, r3, #17
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d009      	beq.n	8001f20 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f10:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f18:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	4b44      	ldr	r3, [pc, #272]	; (8002038 <HAL_ADC_Init+0x288>)
 8001f28:	4013      	ands	r3, r2
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	69b9      	ldr	r1, [r7, #24]
 8001f30:	430b      	orrs	r3, r1
 8001f32:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ff26 	bl	8001d8a <LL_ADC_INJ_IsConversionOngoing>
 8001f3e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d140      	bne.n	8001fc8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d13d      	bne.n	8001fc8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7e1b      	ldrb	r3, [r3, #24]
 8001f54:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f56:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f5e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f6e:	f023 0306 	bic.w	r3, r3, #6
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d118      	bne.n	8001fb8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001f90:	f023 0304 	bic.w	r3, r3, #4
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001f98:	687a      	ldr	r2, [r7, #4]
 8001f9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f9c:	4311      	orrs	r1, r2
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fa2:	4311      	orrs	r1, r2
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f042 0201 	orr.w	r2, r2, #1
 8001fb4:	611a      	str	r2, [r3, #16]
 8001fb6:	e007      	b.n	8001fc8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	691a      	ldr	r2, [r3, #16]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d10c      	bne.n	8001fea <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f023 010f 	bic.w	r1, r3, #15
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	1e5a      	subs	r2, r3, #1
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8001fe8:	e007      	b.n	8001ffa <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f022 020f 	bic.w	r2, r2, #15
 8001ff8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f023 0303 	bic.w	r3, r3, #3
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	659a      	str	r2, [r3, #88]	; 0x58
 800200a:	e007      	b.n	800201c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	f043 0210 	orr.w	r2, r3, #16
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800201c:	7ffb      	ldrb	r3, [r7, #31]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000004 	.word	0x20000004
 800202c:	053e2d63 	.word	0x053e2d63
 8002030:	50040000 	.word	0x50040000
 8002034:	50040300 	.word	0x50040300
 8002038:	fff0c007 	.word	0xfff0c007

0800203c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fe77 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d14f      	bne.n	80020f4 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800205a:	2b01      	cmp	r3, #1
 800205c:	d101      	bne.n	8002062 <HAL_ADC_Start+0x26>
 800205e:	2302      	movs	r3, #2
 8002060:	e04b      	b.n	80020fa <HAL_ADC_Start+0xbe>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2201      	movs	r2, #1
 8002066:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fdd0 	bl	8002c10 <ADC_Enable>
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d137      	bne.n	80020ea <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002082:	f023 0301 	bic.w	r3, r3, #1
 8002086:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800209a:	d106      	bne.n	80020aa <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	f023 0206 	bic.w	r2, r3, #6
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80020a8:	e002      	b.n	80020b0 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	221c      	movs	r2, #28
 80020b6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fe02 	bl	8001cec <LL_ADC_REG_StartConversion>
 80020e8:	e006      	b.n	80020f8 <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80020f2:	e001      	b.n	80020f8 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
 80020f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80020f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_ADC_Stop+0x16>
 8002114:	2302      	movs	r3, #2
 8002116:	e023      	b.n	8002160 <HAL_ADC_Stop+0x5e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002120:	2103      	movs	r1, #3
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fcb8 	bl	8002a98 <ADC_ConversionStop>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d111      	bne.n	8002156 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 fdf2 	bl	8002d1c <ADC_Disable>
 8002138:	4603      	mov	r3, r0
 800213a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800213c:	7bfb      	ldrb	r3, [r7, #15]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d109      	bne.n	8002156 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	f043 0201 	orr.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b08      	cmp	r3, #8
 8002178:	d102      	bne.n	8002180 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800217a:	2308      	movs	r3, #8
 800217c:	617b      	str	r3, [r7, #20]
 800217e:	e010      	b.n	80021a2 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	f003 0301 	and.w	r3, r3, #1
 800218a:	2b00      	cmp	r3, #0
 800218c:	d007      	beq.n	800219e <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002192:	f043 0220 	orr.w	r2, r3, #32
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e06f      	b.n	800227e <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800219e:	2304      	movs	r3, #4
 80021a0:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80021a2:	f7ff fbad 	bl	8001900 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021a8:	e021      	b.n	80021ee <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d01d      	beq.n	80021ee <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80021b2:	f7ff fba5 	bl	8001900 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d302      	bcc.n	80021c8 <HAL_ADC_PollForConversion+0x60>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d112      	bne.n	80021ee <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	4013      	ands	r3, r2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10b      	bne.n	80021ee <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021da:	f043 0204 	orr.w	r2, r3, #4
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80021ea:	2303      	movs	r3, #3
 80021ec:	e047      	b.n	800227e <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0d6      	beq.n	80021aa <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff fc43 	bl	8001a98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01c      	beq.n	8002252 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	7e5b      	ldrb	r3, [r3, #25]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d118      	bne.n	8002252 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b08      	cmp	r3, #8
 800222c:	d111      	bne.n	8002252 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002232:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800223e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d105      	bne.n	8002252 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800224a:	f043 0201 	orr.w	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d104      	bne.n	800226a <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2208      	movs	r2, #8
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	e008      	b.n	800227c <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d103      	bne.n	800227c <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	220c      	movs	r2, #12
 800227a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002294:	4618      	mov	r0, r3
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b0b6      	sub	sp, #216	; 0xd8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d101      	bne.n	80022c2 <HAL_ADC_ConfigChannel+0x22>
 80022be:	2302      	movs	r3, #2
 80022c0:	e3d5      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x7ce>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fd34 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	f040 83ba 	bne.w	8002a50 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b05      	cmp	r3, #5
 80022ea:	d824      	bhi.n	8002336 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	3b02      	subs	r3, #2
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d81b      	bhi.n	800232e <HAL_ADC_ConfigChannel+0x8e>
 80022f6:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <HAL_ADC_ConfigChannel+0x5c>)
 80022f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fc:	0800230d 	.word	0x0800230d
 8002300:	08002315 	.word	0x08002315
 8002304:	0800231d 	.word	0x0800231d
 8002308:	08002325 	.word	0x08002325
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800230c:	230c      	movs	r3, #12
 800230e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002312:	e010      	b.n	8002336 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002314:	2312      	movs	r3, #18
 8002316:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800231a:	e00c      	b.n	8002336 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800231c:	2318      	movs	r3, #24
 800231e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002322:	e008      	b.n	8002336 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002324:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800232c:	e003      	b.n	8002336 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800232e:	2306      	movs	r3, #6
 8002330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002334:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6818      	ldr	r0, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	461a      	mov	r2, r3
 8002340:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002344:	f7ff fbbb 	bl	8001abe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f7ff fcf5 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 8002352:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fd15 	bl	8001d8a <LL_ADC_INJ_IsConversionOngoing>
 8002360:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002364:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002368:	2b00      	cmp	r3, #0
 800236a:	f040 81bf 	bne.w	80026ec <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800236e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002372:	2b00      	cmp	r3, #0
 8002374:	f040 81ba 	bne.w	80026ec <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002380:	d10f      	bne.n	80023a2 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6818      	ldr	r0, [r3, #0]
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2200      	movs	r2, #0
 800238c:	4619      	mov	r1, r3
 800238e:	f7ff fbc2 	bl	8001b16 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fb69 	bl	8001a72 <LL_ADC_SetSamplingTimeCommonConfig>
 80023a0:	e00e      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6819      	ldr	r1, [r3, #0]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	461a      	mov	r2, r3
 80023b0:	f7ff fbb1 	bl	8001b16 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff fb59 	bl	8001a72 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	695a      	ldr	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	08db      	lsrs	r3, r3, #3
 80023cc:	f003 0303 	and.w	r3, r3, #3
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d00a      	beq.n	80023f8 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	6919      	ldr	r1, [r3, #16]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023f2:	f7ff fae9 	bl	80019c8 <LL_ADC_SetOffset>
 80023f6:	e179      	b.n	80026ec <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2100      	movs	r1, #0
 80023fe:	4618      	mov	r0, r3
 8002400:	f7ff fb06 	bl	8001a10 <LL_ADC_GetOffsetChannel>
 8002404:	4603      	mov	r3, r0
 8002406:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10a      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x184>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2100      	movs	r1, #0
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fafb 	bl	8001a10 <LL_ADC_GetOffsetChannel>
 800241a:	4603      	mov	r3, r0
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	f003 021f 	and.w	r2, r3, #31
 8002422:	e01e      	b.n	8002462 <HAL_ADC_ConfigChannel+0x1c2>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2100      	movs	r1, #0
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff faf0 	bl	8001a10 <LL_ADC_GetOffsetChannel>
 8002430:	4603      	mov	r3, r0
 8002432:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800243a:	fa93 f3a3 	rbit	r3, r3
 800243e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002442:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002446:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800244a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002452:	2320      	movs	r3, #32
 8002454:	e004      	b.n	8002460 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002456:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800246a:	2b00      	cmp	r3, #0
 800246c:	d105      	bne.n	800247a <HAL_ADC_ConfigChannel+0x1da>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	0e9b      	lsrs	r3, r3, #26
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	e018      	b.n	80024ac <HAL_ADC_ConfigChannel+0x20c>
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800248e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002492:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002496:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 800249e:	2320      	movs	r3, #32
 80024a0:	e004      	b.n	80024ac <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80024a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80024a6:	fab3 f383 	clz	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d106      	bne.n	80024be <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2200      	movs	r2, #0
 80024b6:	2100      	movs	r1, #0
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff fabf 	bl	8001a3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2101      	movs	r1, #1
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff faa3 	bl	8001a10 <LL_ADC_GetOffsetChannel>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10a      	bne.n	80024ea <HAL_ADC_ConfigChannel+0x24a>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2101      	movs	r1, #1
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fa98 	bl	8001a10 <LL_ADC_GetOffsetChannel>
 80024e0:	4603      	mov	r3, r0
 80024e2:	0e9b      	lsrs	r3, r3, #26
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	e01e      	b.n	8002528 <HAL_ADC_ConfigChannel+0x288>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2101      	movs	r1, #1
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff fa8d 	bl	8001a10 <LL_ADC_GetOffsetChannel>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002500:	fa93 f3a3 	rbit	r3, r3
 8002504:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002508:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800250c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002510:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002518:	2320      	movs	r3, #32
 800251a:	e004      	b.n	8002526 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 800251c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002530:	2b00      	cmp	r3, #0
 8002532:	d105      	bne.n	8002540 <HAL_ADC_ConfigChannel+0x2a0>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0e9b      	lsrs	r3, r3, #26
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	e018      	b.n	8002572 <HAL_ADC_ConfigChannel+0x2d2>
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002554:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800255c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002564:	2320      	movs	r3, #32
 8002566:	e004      	b.n	8002572 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002568:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800256c:	fab3 f383 	clz	r3, r3
 8002570:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002572:	429a      	cmp	r2, r3
 8002574:	d106      	bne.n	8002584 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2200      	movs	r2, #0
 800257c:	2101      	movs	r1, #1
 800257e:	4618      	mov	r0, r3
 8002580:	f7ff fa5c 	bl	8001a3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2102      	movs	r1, #2
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff fa40 	bl	8001a10 <LL_ADC_GetOffsetChannel>
 8002590:	4603      	mov	r3, r0
 8002592:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10a      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x310>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2102      	movs	r1, #2
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fa35 	bl	8001a10 <LL_ADC_GetOffsetChannel>
 80025a6:	4603      	mov	r3, r0
 80025a8:	0e9b      	lsrs	r3, r3, #26
 80025aa:	f003 021f 	and.w	r2, r3, #31
 80025ae:	e01e      	b.n	80025ee <HAL_ADC_ConfigChannel+0x34e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2102      	movs	r1, #2
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff fa2a 	bl	8001a10 <LL_ADC_GetOffsetChannel>
 80025bc:	4603      	mov	r3, r0
 80025be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025c6:	fa93 f3a3 	rbit	r3, r3
 80025ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80025ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80025d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80025d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80025de:	2320      	movs	r3, #32
 80025e0:	e004      	b.n	80025ec <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80025e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025e6:	fab3 f383 	clz	r3, r3
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d105      	bne.n	8002606 <HAL_ADC_ConfigChannel+0x366>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	0e9b      	lsrs	r3, r3, #26
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	e014      	b.n	8002630 <HAL_ADC_ConfigChannel+0x390>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800260e:	fa93 f3a3 	rbit	r3, r3
 8002612:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002616:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800261a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002622:	2320      	movs	r3, #32
 8002624:	e004      	b.n	8002630 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002626:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800262a:	fab3 f383 	clz	r3, r3
 800262e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002630:	429a      	cmp	r2, r3
 8002632:	d106      	bne.n	8002642 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2200      	movs	r2, #0
 800263a:	2102      	movs	r1, #2
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff f9fd 	bl	8001a3c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2103      	movs	r1, #3
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff f9e1 	bl	8001a10 <LL_ADC_GetOffsetChannel>
 800264e:	4603      	mov	r3, r0
 8002650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <HAL_ADC_ConfigChannel+0x3ce>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2103      	movs	r1, #3
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff f9d6 	bl	8001a10 <LL_ADC_GetOffsetChannel>
 8002664:	4603      	mov	r3, r0
 8002666:	0e9b      	lsrs	r3, r3, #26
 8002668:	f003 021f 	and.w	r2, r3, #31
 800266c:	e017      	b.n	800269e <HAL_ADC_ConfigChannel+0x3fe>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2103      	movs	r1, #3
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff f9cb 	bl	8001a10 <LL_ADC_GetOffsetChannel>
 800267a:	4603      	mov	r3, r0
 800267c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002688:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800268a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002690:	2320      	movs	r3, #32
 8002692:	e003      	b.n	800269c <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002694:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002696:	fab3 f383 	clz	r3, r3
 800269a:	b2db      	uxtb	r3, r3
 800269c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d105      	bne.n	80026b6 <HAL_ADC_ConfigChannel+0x416>
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	0e9b      	lsrs	r3, r3, #26
 80026b0:	f003 031f 	and.w	r3, r3, #31
 80026b4:	e011      	b.n	80026da <HAL_ADC_ConfigChannel+0x43a>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026be:	fa93 f3a3 	rbit	r3, r3
 80026c2:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80026c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026c6:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80026c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d101      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80026ce:	2320      	movs	r3, #32
 80026d0:	e003      	b.n	80026da <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80026d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d4:	fab3 f383 	clz	r3, r3
 80026d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026da:	429a      	cmp	r2, r3
 80026dc:	d106      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2200      	movs	r2, #0
 80026e4:	2103      	movs	r1, #3
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff f9a8 	bl	8001a3c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff fad5 	bl	8001ca0 <LL_ADC_IsEnabled>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	f040 813f 	bne.w	800297c <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	6819      	ldr	r1, [r3, #0]
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	68db      	ldr	r3, [r3, #12]
 800270a:	461a      	mov	r2, r3
 800270c:	f7ff fa2e 	bl	8001b6c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4a8e      	ldr	r2, [pc, #568]	; (8002950 <HAL_ADC_ConfigChannel+0x6b0>)
 8002716:	4293      	cmp	r3, r2
 8002718:	f040 8130 	bne.w	800297c <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10b      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x4a4>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	3301      	adds	r3, #1
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	2b09      	cmp	r3, #9
 800273a:	bf94      	ite	ls
 800273c:	2301      	movls	r3, #1
 800273e:	2300      	movhi	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	e019      	b.n	8002778 <HAL_ADC_ConfigChannel+0x4d8>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002752:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002754:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 800275c:	2320      	movs	r3, #32
 800275e:	e003      	b.n	8002768 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002760:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002762:	fab3 f383 	clz	r3, r3
 8002766:	b2db      	uxtb	r3, r3
 8002768:	3301      	adds	r3, #1
 800276a:	f003 031f 	and.w	r3, r3, #31
 800276e:	2b09      	cmp	r3, #9
 8002770:	bf94      	ite	ls
 8002772:	2301      	movls	r3, #1
 8002774:	2300      	movhi	r3, #0
 8002776:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002778:	2b00      	cmp	r3, #0
 800277a:	d079      	beq.n	8002870 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_ADC_ConfigChannel+0x4f8>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	0e9b      	lsrs	r3, r3, #26
 800278e:	3301      	adds	r3, #1
 8002790:	069b      	lsls	r3, r3, #26
 8002792:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002796:	e015      	b.n	80027c4 <HAL_ADC_ConfigChannel+0x524>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a0:	fa93 f3a3 	rbit	r3, r3
 80027a4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80027a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80027aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80027b0:	2320      	movs	r3, #32
 80027b2:	e003      	b.n	80027bc <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80027b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b6:	fab3 f383 	clz	r3, r3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	3301      	adds	r3, #1
 80027be:	069b      	lsls	r3, r3, #26
 80027c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d109      	bne.n	80027e4 <HAL_ADC_ConfigChannel+0x544>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0e9b      	lsrs	r3, r3, #26
 80027d6:	3301      	adds	r3, #1
 80027d8:	f003 031f 	and.w	r3, r3, #31
 80027dc:	2101      	movs	r1, #1
 80027de:	fa01 f303 	lsl.w	r3, r1, r3
 80027e2:	e017      	b.n	8002814 <HAL_ADC_ConfigChannel+0x574>
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80027f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80027f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80027fc:	2320      	movs	r3, #32
 80027fe:	e003      	b.n	8002808 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	3301      	adds	r3, #1
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	2101      	movs	r1, #1
 8002810:	fa01 f303 	lsl.w	r3, r1, r3
 8002814:	ea42 0103 	orr.w	r1, r2, r3
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10a      	bne.n	800283a <HAL_ADC_ConfigChannel+0x59a>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	0e9b      	lsrs	r3, r3, #26
 800282a:	3301      	adds	r3, #1
 800282c:	f003 021f 	and.w	r2, r3, #31
 8002830:	4613      	mov	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	4413      	add	r3, r2
 8002836:	051b      	lsls	r3, r3, #20
 8002838:	e018      	b.n	800286c <HAL_ADC_ConfigChannel+0x5cc>
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800284c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8002852:	2320      	movs	r3, #32
 8002854:	e003      	b.n	800285e <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8002856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002858:	fab3 f383 	clz	r3, r3
 800285c:	b2db      	uxtb	r3, r3
 800285e:	3301      	adds	r3, #1
 8002860:	f003 021f 	and.w	r2, r3, #31
 8002864:	4613      	mov	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	4413      	add	r3, r2
 800286a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800286c:	430b      	orrs	r3, r1
 800286e:	e080      	b.n	8002972 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002878:	2b00      	cmp	r3, #0
 800287a:	d107      	bne.n	800288c <HAL_ADC_ConfigChannel+0x5ec>
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	0e9b      	lsrs	r3, r3, #26
 8002882:	3301      	adds	r3, #1
 8002884:	069b      	lsls	r3, r3, #26
 8002886:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800288a:	e015      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x618>
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	fa93 f3a3 	rbit	r3, r3
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80028a4:	2320      	movs	r3, #32
 80028a6:	e003      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	fab3 f383 	clz	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	069b      	lsls	r3, r3, #26
 80028b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d109      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x638>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0e9b      	lsrs	r3, r3, #26
 80028ca:	3301      	adds	r3, #1
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	2101      	movs	r1, #1
 80028d2:	fa01 f303 	lsl.w	r3, r1, r3
 80028d6:	e017      	b.n	8002908 <HAL_ADC_ConfigChannel+0x668>
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	fa93 f3a3 	rbit	r3, r3
 80028e4:	61bb      	str	r3, [r7, #24]
  return result;
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e003      	b.n	80028fc <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	fab3 f383 	clz	r3, r3
 80028fa:	b2db      	uxtb	r3, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f003 031f 	and.w	r3, r3, #31
 8002902:	2101      	movs	r1, #1
 8002904:	fa01 f303 	lsl.w	r3, r1, r3
 8002908:	ea42 0103 	orr.w	r1, r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10d      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x694>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0e9b      	lsrs	r3, r3, #26
 800291e:	3301      	adds	r3, #1
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4613      	mov	r3, r2
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	4413      	add	r3, r2
 800292a:	3b1e      	subs	r3, #30
 800292c:	051b      	lsls	r3, r3, #20
 800292e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002932:	e01d      	b.n	8002970 <HAL_ADC_ConfigChannel+0x6d0>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	fa93 f3a3 	rbit	r3, r3
 8002940:	60fb      	str	r3, [r7, #12]
  return result;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d103      	bne.n	8002954 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 800294c:	2320      	movs	r3, #32
 800294e:	e005      	b.n	800295c <HAL_ADC_ConfigChannel+0x6bc>
 8002950:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	fab3 f383 	clz	r3, r3
 800295a:	b2db      	uxtb	r3, r3
 800295c:	3301      	adds	r3, #1
 800295e:	f003 021f 	and.w	r2, r3, #31
 8002962:	4613      	mov	r3, r2
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	4413      	add	r3, r2
 8002968:	3b1e      	subs	r3, #30
 800296a:	051b      	lsls	r3, r3, #20
 800296c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002970:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002976:	4619      	mov	r1, r3
 8002978:	f7ff f8cd 	bl	8001b16 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	4b3d      	ldr	r3, [pc, #244]	; (8002a78 <HAL_ADC_ConfigChannel+0x7d8>)
 8002982:	4013      	ands	r3, r2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d06c      	beq.n	8002a62 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002988:	483c      	ldr	r0, [pc, #240]	; (8002a7c <HAL_ADC_ConfigChannel+0x7dc>)
 800298a:	f7ff f80f 	bl	80019ac <LL_ADC_GetCommonPathInternalCh>
 800298e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a3a      	ldr	r2, [pc, #232]	; (8002a80 <HAL_ADC_ConfigChannel+0x7e0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d127      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800299c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d121      	bne.n	80029ec <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a35      	ldr	r2, [pc, #212]	; (8002a84 <HAL_ADC_ConfigChannel+0x7e4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d157      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029ba:	4619      	mov	r1, r3
 80029bc:	482f      	ldr	r0, [pc, #188]	; (8002a7c <HAL_ADC_ConfigChannel+0x7dc>)
 80029be:	f7fe ffe2 	bl	8001986 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029c2:	4b31      	ldr	r3, [pc, #196]	; (8002a88 <HAL_ADC_ConfigChannel+0x7e8>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	099b      	lsrs	r3, r3, #6
 80029c8:	4a30      	ldr	r2, [pc, #192]	; (8002a8c <HAL_ADC_ConfigChannel+0x7ec>)
 80029ca:	fba2 2303 	umull	r2, r3, r2, r3
 80029ce:	099b      	lsrs	r3, r3, #6
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	4613      	mov	r3, r2
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029dc:	e002      	b.n	80029e4 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	3b01      	subs	r3, #1
 80029e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f9      	bne.n	80029de <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029ea:	e03a      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a27      	ldr	r2, [pc, #156]	; (8002a90 <HAL_ADC_ConfigChannel+0x7f0>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d113      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10d      	bne.n	8002a1e <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d12a      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a0c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a14:	4619      	mov	r1, r3
 8002a16:	4819      	ldr	r0, [pc, #100]	; (8002a7c <HAL_ADC_ConfigChannel+0x7dc>)
 8002a18:	f7fe ffb5 	bl	8001986 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a1c:	e021      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <HAL_ADC_ConfigChannel+0x7f4>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d11c      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d116      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a12      	ldr	r2, [pc, #72]	; (8002a84 <HAL_ADC_ConfigChannel+0x7e4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d111      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a46:	4619      	mov	r1, r3
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <HAL_ADC_ConfigChannel+0x7dc>)
 8002a4a:	f7fe ff9c 	bl	8001986 <LL_ADC_SetCommonPathInternalCh>
 8002a4e:	e008      	b.n	8002a62 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	f043 0220 	orr.w	r2, r3, #32
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8002a6a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	37d8      	adds	r7, #216	; 0xd8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	80080000 	.word	0x80080000
 8002a7c:	50040300 	.word	0x50040300
 8002a80:	c7520000 	.word	0xc7520000
 8002a84:	50040000 	.word	0x50040000
 8002a88:	20000004 	.word	0x20000004
 8002a8c:	053e2d63 	.word	0x053e2d63
 8002a90:	cb840000 	.word	0xcb840000
 8002a94:	80000001 	.word	0x80000001

08002a98 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f944 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 8002ab4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7ff f965 	bl	8001d8a <LL_ADC_INJ_IsConversionOngoing>
 8002ac0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 8098 	beq.w	8002c00 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d02a      	beq.n	8002b34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	7e5b      	ldrb	r3, [r3, #25]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d126      	bne.n	8002b34 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7e1b      	ldrb	r3, [r3, #24]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d122      	bne.n	8002b34 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002af2:	e014      	b.n	8002b1e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	4a45      	ldr	r2, [pc, #276]	; (8002c0c <ADC_ConversionStop+0x174>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d90d      	bls.n	8002b18 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b00:	f043 0210 	orr.w	r2, r3, #16
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	f043 0201 	orr.w	r2, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e074      	b.n	8002c02 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d1e3      	bne.n	8002af4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2240      	movs	r2, #64	; 0x40
 8002b32:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d014      	beq.n	8002b64 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff f8fc 	bl	8001d3c <LL_ADC_REG_IsConversionOngoing>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00c      	beq.n	8002b64 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7ff f8b9 	bl	8001cc6 <LL_ADC_IsDisableOngoing>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d104      	bne.n	8002b64 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f8d8 	bl	8001d14 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d014      	beq.n	8002b94 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff f90b 	bl	8001d8a <LL_ADC_INJ_IsConversionOngoing>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00c      	beq.n	8002b94 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7ff f8a1 	bl	8001cc6 <LL_ADC_IsDisableOngoing>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff f8e7 	bl	8001d62 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d005      	beq.n	8002ba6 <ADC_ConversionStop+0x10e>
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d105      	bne.n	8002bac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002ba0:	230c      	movs	r3, #12
 8002ba2:	617b      	str	r3, [r7, #20]
        break;
 8002ba4:	e005      	b.n	8002bb2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002ba6:	2308      	movs	r3, #8
 8002ba8:	617b      	str	r3, [r7, #20]
        break;
 8002baa:	e002      	b.n	8002bb2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002bac:	2304      	movs	r3, #4
 8002bae:	617b      	str	r3, [r7, #20]
        break;
 8002bb0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002bb2:	f7fe fea5 	bl	8001900 <HAL_GetTick>
 8002bb6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bb8:	e01b      	b.n	8002bf2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002bba:	f7fe fea1 	bl	8001900 <HAL_GetTick>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	2b05      	cmp	r3, #5
 8002bc6:	d914      	bls.n	8002bf2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00d      	beq.n	8002bf2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bda:	f043 0210 	orr.w	r2, r3, #16
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002be6:	f043 0201 	orr.w	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e007      	b.n	8002c02 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1dc      	bne.n	8002bba <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	a33fffff 	.word	0xa33fffff

08002c10 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff f83d 	bl	8001ca0 <LL_ADC_IsEnabled>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d169      	bne.n	8002d00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	4b36      	ldr	r3, [pc, #216]	; (8002d0c <ADC_Enable+0xfc>)
 8002c34:	4013      	ands	r3, r2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00d      	beq.n	8002c56 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	f043 0210 	orr.w	r2, r3, #16
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4a:	f043 0201 	orr.w	r2, r3, #1
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e055      	b.n	8002d02 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7fe fff8 	bl	8001c50 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c60:	482b      	ldr	r0, [pc, #172]	; (8002d10 <ADC_Enable+0x100>)
 8002c62:	f7fe fea3 	bl	80019ac <LL_ADC_GetCommonPathInternalCh>
 8002c66:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d013      	beq.n	8002c98 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c70:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <ADC_Enable+0x104>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	099b      	lsrs	r3, r3, #6
 8002c76:	4a28      	ldr	r2, [pc, #160]	; (8002d18 <ADC_Enable+0x108>)
 8002c78:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7c:	099b      	lsrs	r3, r3, #6
 8002c7e:	1c5a      	adds	r2, r3, #1
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c8a:	e002      	b.n	8002c92 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f9      	bne.n	8002c8c <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c98:	f7fe fe32 	bl	8001900 <HAL_GetTick>
 8002c9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c9e:	e028      	b.n	8002cf2 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe fffb 	bl	8001ca0 <LL_ADC_IsEnabled>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d104      	bne.n	8002cba <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe ffcb 	bl	8001c50 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cba:	f7fe fe21 	bl	8001900 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d914      	bls.n	8002cf2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d00d      	beq.n	8002cf2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cda:	f043 0210 	orr.w	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	f043 0201 	orr.w	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e007      	b.n	8002d02 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d1cf      	bne.n	8002ca0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3710      	adds	r7, #16
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	8000003f 	.word	0x8000003f
 8002d10:	50040300 	.word	0x50040300
 8002d14:	20000004 	.word	0x20000004
 8002d18:	053e2d63 	.word	0x053e2d63

08002d1c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe ffcc 	bl	8001cc6 <LL_ADC_IsDisableOngoing>
 8002d2e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7fe ffb3 	bl	8001ca0 <LL_ADC_IsEnabled>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d047      	beq.n	8002dd0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d144      	bne.n	8002dd0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 030d 	and.w	r3, r3, #13
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d10c      	bne.n	8002d6e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7fe ff8d 	bl	8001c78 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2203      	movs	r2, #3
 8002d64:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d66:	f7fe fdcb 	bl	8001900 <HAL_GetTick>
 8002d6a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d6c:	e029      	b.n	8002dc2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d72:	f043 0210 	orr.w	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7e:	f043 0201 	orr.w	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e023      	b.n	8002dd2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d8a:	f7fe fdb9 	bl	8001900 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d914      	bls.n	8002dc2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	f043 0210 	orr.w	r2, r3, #16
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db6:	f043 0201 	orr.w	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e007      	b.n	8002dd2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1dc      	bne.n	8002d8a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dec:	4b0c      	ldr	r3, [pc, #48]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002df2:	68ba      	ldr	r2, [r7, #8]
 8002df4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002df8:	4013      	ands	r3, r2
 8002dfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e0e:	4a04      	ldr	r2, [pc, #16]	; (8002e20 <__NVIC_SetPriorityGrouping+0x44>)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	60d3      	str	r3, [r2, #12]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e28:	4b04      	ldr	r3, [pc, #16]	; (8002e3c <__NVIC_GetPriorityGrouping+0x18>)
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	0a1b      	lsrs	r3, r3, #8
 8002e2e:	f003 0307 	and.w	r3, r3, #7
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	4603      	mov	r3, r0
 8002e48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	db0b      	blt.n	8002e6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	f003 021f 	and.w	r2, r3, #31
 8002e58:	4907      	ldr	r1, [pc, #28]	; (8002e78 <__NVIC_EnableIRQ+0x38>)
 8002e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e5e:	095b      	lsrs	r3, r3, #5
 8002e60:	2001      	movs	r0, #1
 8002e62:	fa00 f202 	lsl.w	r2, r0, r2
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e6a:	bf00      	nop
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	e000e100 	.word	0xe000e100

08002e7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	4603      	mov	r3, r0
 8002e84:	6039      	str	r1, [r7, #0]
 8002e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	db0a      	blt.n	8002ea6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	b2da      	uxtb	r2, r3
 8002e94:	490c      	ldr	r1, [pc, #48]	; (8002ec8 <__NVIC_SetPriority+0x4c>)
 8002e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e9a:	0112      	lsls	r2, r2, #4
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ea4:	e00a      	b.n	8002ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	4908      	ldr	r1, [pc, #32]	; (8002ecc <__NVIC_SetPriority+0x50>)
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	3b04      	subs	r3, #4
 8002eb4:	0112      	lsls	r2, r2, #4
 8002eb6:	b2d2      	uxtb	r2, r2
 8002eb8:	440b      	add	r3, r1
 8002eba:	761a      	strb	r2, [r3, #24]
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	e000e100 	.word	0xe000e100
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 0307 	and.w	r3, r3, #7
 8002ee2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f1c3 0307 	rsb	r3, r3, #7
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	bf28      	it	cs
 8002eee:	2304      	movcs	r3, #4
 8002ef0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2b06      	cmp	r3, #6
 8002ef8:	d902      	bls.n	8002f00 <NVIC_EncodePriority+0x30>
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	3b03      	subs	r3, #3
 8002efe:	e000      	b.n	8002f02 <NVIC_EncodePriority+0x32>
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f04:	f04f 32ff 	mov.w	r2, #4294967295
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	401a      	ands	r2, r3
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f18:	f04f 31ff 	mov.w	r1, #4294967295
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f22:	43d9      	mvns	r1, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f28:	4313      	orrs	r3, r2
         );
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3724      	adds	r7, #36	; 0x24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3b01      	subs	r3, #1
 8002f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f48:	d301      	bcc.n	8002f4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00f      	b.n	8002f6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <SysTick_Config+0x40>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	3b01      	subs	r3, #1
 8002f54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f56:	210f      	movs	r1, #15
 8002f58:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5c:	f7ff ff8e 	bl	8002e7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <SysTick_Config+0x40>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f66:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <SysTick_Config+0x40>)
 8002f68:	2207      	movs	r2, #7
 8002f6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	e000e010 	.word	0xe000e010

08002f7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f7ff ff29 	bl	8002ddc <__NVIC_SetPriorityGrouping>
}
 8002f8a:	bf00      	nop
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b086      	sub	sp, #24
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002fa4:	f7ff ff3e 	bl	8002e24 <__NVIC_GetPriorityGrouping>
 8002fa8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	68b9      	ldr	r1, [r7, #8]
 8002fae:	6978      	ldr	r0, [r7, #20]
 8002fb0:	f7ff ff8e 	bl	8002ed0 <NVIC_EncodePriority>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff5d 	bl	8002e7c <__NVIC_SetPriority>
}
 8002fc2:	bf00      	nop
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ff31 	bl	8002e40 <__NVIC_EnableIRQ>
}
 8002fde:	bf00      	nop
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b082      	sub	sp, #8
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7ff ffa2 	bl	8002f38 <SysTick_Config>
 8002ff4:	4603      	mov	r3, r0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300e:	e154      	b.n	80032ba <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2101      	movs	r1, #1
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	fa01 f303 	lsl.w	r3, r1, r3
 800301c:	4013      	ands	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8146 	beq.w	80032b4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b01      	cmp	r3, #1
 8003032:	d005      	beq.n	8003040 <HAL_GPIO_Init+0x40>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	2b02      	cmp	r3, #2
 800303e:	d130      	bne.n	80030a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	2203      	movs	r2, #3
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	4013      	ands	r3, r2
 8003056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	4313      	orrs	r3, r2
 8003068:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003076:	2201      	movs	r2, #1
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	43db      	mvns	r3, r3
 8003080:	693a      	ldr	r2, [r7, #16]
 8003082:	4013      	ands	r3, r2
 8003084:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	091b      	lsrs	r3, r3, #4
 800308c:	f003 0201 	and.w	r2, r3, #1
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	fa02 f303 	lsl.w	r3, r2, r3
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	2b03      	cmp	r3, #3
 80030ac:	d017      	beq.n	80030de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2203      	movs	r2, #3
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	fa02 f303 	lsl.w	r3, r2, r3
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d123      	bne.n	8003132 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	08da      	lsrs	r2, r3, #3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	3208      	adds	r2, #8
 80030f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	220f      	movs	r2, #15
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	691a      	ldr	r2, [r3, #16]
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	fa02 f303 	lsl.w	r3, r2, r3
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	4313      	orrs	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	08da      	lsrs	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3208      	adds	r2, #8
 800312c:	6939      	ldr	r1, [r7, #16]
 800312e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2203      	movs	r2, #3
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	693a      	ldr	r2, [r7, #16]
 8003146:	4013      	ands	r3, r2
 8003148:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0203 	and.w	r2, r3, #3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4313      	orrs	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80a0 	beq.w	80032b4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003174:	4b58      	ldr	r3, [pc, #352]	; (80032d8 <HAL_GPIO_Init+0x2d8>)
 8003176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003178:	4a57      	ldr	r2, [pc, #348]	; (80032d8 <HAL_GPIO_Init+0x2d8>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6613      	str	r3, [r2, #96]	; 0x60
 8003180:	4b55      	ldr	r3, [pc, #340]	; (80032d8 <HAL_GPIO_Init+0x2d8>)
 8003182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	60bb      	str	r3, [r7, #8]
 800318a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800318c:	4a53      	ldr	r2, [pc, #332]	; (80032dc <HAL_GPIO_Init+0x2dc>)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	089b      	lsrs	r3, r3, #2
 8003192:	3302      	adds	r3, #2
 8003194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003198:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	220f      	movs	r2, #15
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	43db      	mvns	r3, r3
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	4013      	ands	r3, r2
 80031ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031b6:	d019      	beq.n	80031ec <HAL_GPIO_Init+0x1ec>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a49      	ldr	r2, [pc, #292]	; (80032e0 <HAL_GPIO_Init+0x2e0>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d013      	beq.n	80031e8 <HAL_GPIO_Init+0x1e8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a48      	ldr	r2, [pc, #288]	; (80032e4 <HAL_GPIO_Init+0x2e4>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00d      	beq.n	80031e4 <HAL_GPIO_Init+0x1e4>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a47      	ldr	r2, [pc, #284]	; (80032e8 <HAL_GPIO_Init+0x2e8>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d007      	beq.n	80031e0 <HAL_GPIO_Init+0x1e0>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	4a46      	ldr	r2, [pc, #280]	; (80032ec <HAL_GPIO_Init+0x2ec>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d101      	bne.n	80031dc <HAL_GPIO_Init+0x1dc>
 80031d8:	2304      	movs	r3, #4
 80031da:	e008      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031dc:	2307      	movs	r3, #7
 80031de:	e006      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031e0:	2303      	movs	r3, #3
 80031e2:	e004      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e002      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031e8:	2301      	movs	r3, #1
 80031ea:	e000      	b.n	80031ee <HAL_GPIO_Init+0x1ee>
 80031ec:	2300      	movs	r3, #0
 80031ee:	697a      	ldr	r2, [r7, #20]
 80031f0:	f002 0203 	and.w	r2, r2, #3
 80031f4:	0092      	lsls	r2, r2, #2
 80031f6:	4093      	lsls	r3, r2
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80031fe:	4937      	ldr	r1, [pc, #220]	; (80032dc <HAL_GPIO_Init+0x2dc>)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	089b      	lsrs	r3, r3, #2
 8003204:	3302      	adds	r3, #2
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800320c:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	43db      	mvns	r3, r3
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003230:	4a2f      	ldr	r2, [pc, #188]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003236:	4b2e      	ldr	r3, [pc, #184]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	43db      	mvns	r3, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4013      	ands	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4313      	orrs	r3, r2
 8003258:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800325a:	4a25      	ldr	r2, [pc, #148]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003260:	4b23      	ldr	r3, [pc, #140]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	43db      	mvns	r3, r3
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	4013      	ands	r3, r2
 800326e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003284:	4a1a      	ldr	r2, [pc, #104]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800328a:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	43db      	mvns	r3, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3301      	adds	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f47f aea3 	bne.w	8003010 <HAL_GPIO_Init+0x10>
  }
}
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40021000 	.word	0x40021000
 80032dc:	40010000 	.word	0x40010000
 80032e0:	48000400 	.word	0x48000400
 80032e4:	48000800 	.word	0x48000800
 80032e8:	48000c00 	.word	0x48000c00
 80032ec:	48001000 	.word	0x48001000
 80032f0:	40010400 	.word	0x40010400

080032f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	807b      	strh	r3, [r7, #2]
 8003300:	4613      	mov	r3, r2
 8003302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003304:	787b      	ldrb	r3, [r7, #1]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800330a:	887a      	ldrh	r2, [r7, #2]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003310:	e002      	b.n	8003318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003312:	887a      	ldrh	r2, [r7, #2]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003318:	bf00      	nop
 800331a:	370c      	adds	r7, #12
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr

08003324 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <HAL_PWREx_GetVoltageRange+0x18>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003330:	4618      	mov	r0, r3
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	40007000 	.word	0x40007000

08003340 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800334e:	d130      	bne.n	80033b2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003350:	4b23      	ldr	r3, [pc, #140]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335c:	d038      	beq.n	80033d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800335e:	4b20      	ldr	r3, [pc, #128]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003366:	4a1e      	ldr	r2, [pc, #120]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800336c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800336e:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2232      	movs	r2, #50	; 0x32
 8003374:	fb02 f303 	mul.w	r3, r2, r3
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800337a:	fba2 2303 	umull	r2, r3, r2, r3
 800337e:	0c9b      	lsrs	r3, r3, #18
 8003380:	3301      	adds	r3, #1
 8003382:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003384:	e002      	b.n	800338c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3b01      	subs	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800338c:	4b14      	ldr	r3, [pc, #80]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003398:	d102      	bne.n	80033a0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d1f2      	bne.n	8003386 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033a0:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ac:	d110      	bne.n	80033d0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e00f      	b.n	80033d2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033be:	d007      	beq.n	80033d0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80033c0:	4b07      	ldr	r3, [pc, #28]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033c8:	4a05      	ldr	r2, [pc, #20]	; (80033e0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80033ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ce:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	40007000 	.word	0x40007000
 80033e4:	20000004 	.word	0x20000004
 80033e8:	431bde83 	.word	0x431bde83

080033ec <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d102      	bne.n	8003400 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	f000 bc02 	b.w	8003c04 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003400:	4b96      	ldr	r3, [pc, #600]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800340a:	4b94      	ldr	r3, [pc, #592]	; (800365c <HAL_RCC_OscConfig+0x270>)
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0310 	and.w	r3, r3, #16
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80e4 	beq.w	80035ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003422:	69bb      	ldr	r3, [r7, #24]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d007      	beq.n	8003438 <HAL_RCC_OscConfig+0x4c>
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	2b0c      	cmp	r3, #12
 800342c:	f040 808b 	bne.w	8003546 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	2b01      	cmp	r3, #1
 8003434:	f040 8087 	bne.w	8003546 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003438:	4b88      	ldr	r3, [pc, #544]	; (800365c <HAL_RCC_OscConfig+0x270>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0302 	and.w	r3, r3, #2
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_OscConfig+0x64>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e3d9      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1a      	ldr	r2, [r3, #32]
 8003454:	4b81      	ldr	r3, [pc, #516]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d004      	beq.n	800346a <HAL_RCC_OscConfig+0x7e>
 8003460:	4b7e      	ldr	r3, [pc, #504]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003468:	e005      	b.n	8003476 <HAL_RCC_OscConfig+0x8a>
 800346a:	4b7c      	ldr	r3, [pc, #496]	; (800365c <HAL_RCC_OscConfig+0x270>)
 800346c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003470:	091b      	lsrs	r3, r3, #4
 8003472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003476:	4293      	cmp	r3, r2
 8003478:	d223      	bcs.n	80034c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fd8c 	bl	8003f9c <RCC_SetFlashLatencyFromMSIRange>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e3ba      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800348e:	4b73      	ldr	r3, [pc, #460]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a72      	ldr	r2, [pc, #456]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003494:	f043 0308 	orr.w	r3, r3, #8
 8003498:	6013      	str	r3, [r2, #0]
 800349a:	4b70      	ldr	r3, [pc, #448]	; (800365c <HAL_RCC_OscConfig+0x270>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	496d      	ldr	r1, [pc, #436]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ac:	4b6b      	ldr	r3, [pc, #428]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	021b      	lsls	r3, r3, #8
 80034ba:	4968      	ldr	r1, [pc, #416]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
 80034c0:	e025      	b.n	800350e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034c2:	4b66      	ldr	r3, [pc, #408]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a65      	ldr	r2, [pc, #404]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80034c8:	f043 0308 	orr.w	r3, r3, #8
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	4b63      	ldr	r3, [pc, #396]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	4960      	ldr	r1, [pc, #384]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034e0:	4b5e      	ldr	r3, [pc, #376]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	495b      	ldr	r1, [pc, #364]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d109      	bne.n	800350e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fd4c 	bl	8003f9c <RCC_SetFlashLatencyFromMSIRange>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e37a      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800350e:	f000 fc81 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003512:	4602      	mov	r2, r0
 8003514:	4b51      	ldr	r3, [pc, #324]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	091b      	lsrs	r3, r3, #4
 800351a:	f003 030f 	and.w	r3, r3, #15
 800351e:	4950      	ldr	r1, [pc, #320]	; (8003660 <HAL_RCC_OscConfig+0x274>)
 8003520:	5ccb      	ldrb	r3, [r1, r3]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	4a4e      	ldr	r2, [pc, #312]	; (8003664 <HAL_RCC_OscConfig+0x278>)
 800352c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800352e:	4b4e      	ldr	r3, [pc, #312]	; (8003668 <HAL_RCC_OscConfig+0x27c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7fe f994 	bl	8001860 <HAL_InitTick>
 8003538:	4603      	mov	r3, r0
 800353a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800353c:	7bfb      	ldrb	r3, [r7, #15]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d052      	beq.n	80035e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003542:	7bfb      	ldrb	r3, [r7, #15]
 8003544:	e35e      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d032      	beq.n	80035b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800354e:	4b43      	ldr	r3, [pc, #268]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a42      	ldr	r2, [pc, #264]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800355a:	f7fe f9d1 	bl	8001900 <HAL_GetTick>
 800355e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003560:	e008      	b.n	8003574 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003562:	f7fe f9cd 	bl	8001900 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d901      	bls.n	8003574 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e347      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003574:	4b39      	ldr	r3, [pc, #228]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0f0      	beq.n	8003562 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003580:	4b36      	ldr	r3, [pc, #216]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a35      	ldr	r2, [pc, #212]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003586:	f043 0308 	orr.w	r3, r3, #8
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b33      	ldr	r3, [pc, #204]	; (800365c <HAL_RCC_OscConfig+0x270>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	4930      	ldr	r1, [pc, #192]	; (800365c <HAL_RCC_OscConfig+0x270>)
 800359a:	4313      	orrs	r3, r2
 800359c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800359e:	4b2f      	ldr	r3, [pc, #188]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	021b      	lsls	r3, r3, #8
 80035ac:	492b      	ldr	r1, [pc, #172]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	604b      	str	r3, [r1, #4]
 80035b2:	e01a      	b.n	80035ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035b4:	4b29      	ldr	r3, [pc, #164]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a28      	ldr	r2, [pc, #160]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80035ba:	f023 0301 	bic.w	r3, r3, #1
 80035be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80035c0:	f7fe f99e 	bl	8001900 <HAL_GetTick>
 80035c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035c6:	e008      	b.n	80035da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035c8:	f7fe f99a 	bl	8001900 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d901      	bls.n	80035da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e314      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCC_OscConfig+0x270>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0302 	and.w	r3, r3, #2
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f0      	bne.n	80035c8 <HAL_RCC_OscConfig+0x1dc>
 80035e6:	e000      	b.n	80035ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d073      	beq.n	80036de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d005      	beq.n	8003608 <HAL_RCC_OscConfig+0x21c>
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	2b0c      	cmp	r3, #12
 8003600:	d10e      	bne.n	8003620 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	2b03      	cmp	r3, #3
 8003606:	d10b      	bne.n	8003620 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <HAL_RCC_OscConfig+0x270>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d063      	beq.n	80036dc <HAL_RCC_OscConfig+0x2f0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d15f      	bne.n	80036dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e2f1      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003628:	d106      	bne.n	8003638 <HAL_RCC_OscConfig+0x24c>
 800362a:	4b0c      	ldr	r3, [pc, #48]	; (800365c <HAL_RCC_OscConfig+0x270>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a0b      	ldr	r2, [pc, #44]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e025      	b.n	8003684 <HAL_RCC_OscConfig+0x298>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003640:	d114      	bne.n	800366c <HAL_RCC_OscConfig+0x280>
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a05      	ldr	r2, [pc, #20]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b03      	ldr	r3, [pc, #12]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a02      	ldr	r2, [pc, #8]	; (800365c <HAL_RCC_OscConfig+0x270>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e013      	b.n	8003684 <HAL_RCC_OscConfig+0x298>
 800365c:	40021000 	.word	0x40021000
 8003660:	080067fc 	.word	0x080067fc
 8003664:	20000004 	.word	0x20000004
 8003668:	20000008 	.word	0x20000008
 800366c:	4ba0      	ldr	r3, [pc, #640]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a9f      	ldr	r2, [pc, #636]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003672:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	4b9d      	ldr	r3, [pc, #628]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a9c      	ldr	r2, [pc, #624]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 800367e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003682:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d013      	beq.n	80036b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800368c:	f7fe f938 	bl	8001900 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003694:	f7fe f934 	bl	8001900 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b64      	cmp	r3, #100	; 0x64
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e2ae      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036a6:	4b92      	ldr	r3, [pc, #584]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0x2a8>
 80036b2:	e014      	b.n	80036de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fe f924 	bl	8001900 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036bc:	f7fe f920 	bl	8001900 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	; 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e29a      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036ce:	4b88      	ldr	r3, [pc, #544]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x2d0>
 80036da:	e000      	b.n	80036de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d060      	beq.n	80037ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_OscConfig+0x310>
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	2b0c      	cmp	r3, #12
 80036f4:	d119      	bne.n	800372a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d116      	bne.n	800372a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036fc:	4b7c      	ldr	r3, [pc, #496]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d005      	beq.n	8003714 <HAL_RCC_OscConfig+0x328>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d101      	bne.n	8003714 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	e277      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003714:	4b76      	ldr	r3, [pc, #472]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	061b      	lsls	r3, r3, #24
 8003722:	4973      	ldr	r1, [pc, #460]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003724:	4313      	orrs	r3, r2
 8003726:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003728:	e040      	b.n	80037ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d023      	beq.n	800377a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003732:	4b6f      	ldr	r3, [pc, #444]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a6e      	ldr	r2, [pc, #440]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003738:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800373c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7fe f8df 	bl	8001900 <HAL_GetTick>
 8003742:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003744:	e008      	b.n	8003758 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003746:	f7fe f8db 	bl	8001900 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d901      	bls.n	8003758 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e255      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003758:	4b65      	ldr	r3, [pc, #404]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	2b00      	cmp	r3, #0
 8003762:	d0f0      	beq.n	8003746 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003764:	4b62      	ldr	r3, [pc, #392]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	061b      	lsls	r3, r3, #24
 8003772:	495f      	ldr	r1, [pc, #380]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
 8003778:	e018      	b.n	80037ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377a:	4b5d      	ldr	r3, [pc, #372]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a5c      	ldr	r2, [pc, #368]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003780:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003784:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003786:	f7fe f8bb 	bl	8001900 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378e:	f7fe f8b7 	bl	8001900 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e231      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037a0:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1f0      	bne.n	800378e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d03c      	beq.n	8003832 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d01c      	beq.n	80037fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c0:	4b4b      	ldr	r3, [pc, #300]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80037c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037c6:	4a4a      	ldr	r2, [pc, #296]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80037c8:	f043 0301 	orr.w	r3, r3, #1
 80037cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d0:	f7fe f896 	bl	8001900 <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037d8:	f7fe f892 	bl	8001900 <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e20c      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80037ea:	4b41      	ldr	r3, [pc, #260]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80037ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ef      	beq.n	80037d8 <HAL_RCC_OscConfig+0x3ec>
 80037f8:	e01b      	b.n	8003832 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037fa:	4b3d      	ldr	r3, [pc, #244]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80037fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003800:	4a3b      	ldr	r2, [pc, #236]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380a:	f7fe f879 	bl	8001900 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003812:	f7fe f875 	bl	8001900 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e1ef      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003824:	4b32      	ldr	r3, [pc, #200]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382a:	f003 0302 	and.w	r3, r3, #2
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1ef      	bne.n	8003812 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80a6 	beq.w	800398c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003840:	2300      	movs	r3, #0
 8003842:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003844:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10d      	bne.n	800386c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	4b27      	ldr	r3, [pc, #156]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	4a26      	ldr	r2, [pc, #152]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385a:	6593      	str	r3, [r2, #88]	; 0x58
 800385c:	4b24      	ldr	r3, [pc, #144]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 800385e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003868:	2301      	movs	r3, #1
 800386a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800386c:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <HAL_RCC_OscConfig+0x508>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d118      	bne.n	80038aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003878:	4b1e      	ldr	r3, [pc, #120]	; (80038f4 <HAL_RCC_OscConfig+0x508>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <HAL_RCC_OscConfig+0x508>)
 800387e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003882:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003884:	f7fe f83c 	bl	8001900 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800388c:	f7fe f838 	bl	8001900 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e1b2      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800389e:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <HAL_RCC_OscConfig+0x508>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d108      	bne.n	80038c4 <HAL_RCC_OscConfig+0x4d8>
 80038b2:	4b0f      	ldr	r3, [pc, #60]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80038b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038b8:	4a0d      	ldr	r2, [pc, #52]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80038ba:	f043 0301 	orr.w	r3, r3, #1
 80038be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038c2:	e029      	b.n	8003918 <HAL_RCC_OscConfig+0x52c>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b05      	cmp	r3, #5
 80038ca:	d115      	bne.n	80038f8 <HAL_RCC_OscConfig+0x50c>
 80038cc:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80038ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038d2:	4a07      	ldr	r2, [pc, #28]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80038d4:	f043 0304 	orr.w	r3, r3, #4
 80038d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	4a03      	ldr	r2, [pc, #12]	; (80038f0 <HAL_RCC_OscConfig+0x504>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80038ec:	e014      	b.n	8003918 <HAL_RCC_OscConfig+0x52c>
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	40007000 	.word	0x40007000
 80038f8:	4b9a      	ldr	r3, [pc, #616]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	4a99      	ldr	r2, [pc, #612]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003900:	f023 0301 	bic.w	r3, r3, #1
 8003904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003908:	4b96      	ldr	r3, [pc, #600]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	4a95      	ldr	r2, [pc, #596]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003910:	f023 0304 	bic.w	r3, r3, #4
 8003914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d016      	beq.n	800394e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003920:	f7fd ffee 	bl	8001900 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003926:	e00a      	b.n	800393e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003928:	f7fd ffea 	bl	8001900 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	f241 3288 	movw	r2, #5000	; 0x1388
 8003936:	4293      	cmp	r3, r2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e162      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800393e:	4b89      	ldr	r3, [pc, #548]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0ed      	beq.n	8003928 <HAL_RCC_OscConfig+0x53c>
 800394c:	e015      	b.n	800397a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394e:	f7fd ffd7 	bl	8001900 <HAL_GetTick>
 8003952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003954:	e00a      	b.n	800396c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003956:	f7fd ffd3 	bl	8001900 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	f241 3288 	movw	r2, #5000	; 0x1388
 8003964:	4293      	cmp	r3, r2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e14b      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800396c:	4b7d      	ldr	r3, [pc, #500]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 800396e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1ed      	bne.n	8003956 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800397a:	7ffb      	ldrb	r3, [r7, #31]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d105      	bne.n	800398c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003980:	4b78      	ldr	r3, [pc, #480]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003984:	4a77      	ldr	r2, [pc, #476]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800398a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d03c      	beq.n	8003a12 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01c      	beq.n	80039da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039a0:	4b70      	ldr	r3, [pc, #448]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 80039a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039a6:	4a6f      	ldr	r2, [pc, #444]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b0:	f7fd ffa6 	bl	8001900 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039b8:	f7fd ffa2 	bl	8001900 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e11c      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80039ca:	4b66      	ldr	r3, [pc, #408]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 80039cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039d0:	f003 0302 	and.w	r3, r3, #2
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0ef      	beq.n	80039b8 <HAL_RCC_OscConfig+0x5cc>
 80039d8:	e01b      	b.n	8003a12 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80039da:	4b62      	ldr	r3, [pc, #392]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 80039dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80039e0:	4a60      	ldr	r2, [pc, #384]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 80039e2:	f023 0301 	bic.w	r3, r3, #1
 80039e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ea:	f7fd ff89 	bl	8001900 <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039f2:	f7fd ff85 	bl	8001900 <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e0ff      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a04:	4b57      	ldr	r3, [pc, #348]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ef      	bne.n	80039f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80f3 	beq.w	8003c02 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	f040 80c9 	bne.w	8003bb8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003a26:	4b4f      	ldr	r3, [pc, #316]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f003 0203 	and.w	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d12c      	bne.n	8003a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a44:	3b01      	subs	r3, #1
 8003a46:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d123      	bne.n	8003a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d11b      	bne.n	8003a94 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a66:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d113      	bne.n	8003a94 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a76:	085b      	lsrs	r3, r3, #1
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d109      	bne.n	8003a94 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	085b      	lsrs	r3, r3, #1
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d06b      	beq.n	8003b6c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b0c      	cmp	r3, #12
 8003a98:	d062      	beq.n	8003b60 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003a9a:	4b32      	ldr	r3, [pc, #200]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0ac      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003aaa:	4b2e      	ldr	r3, [pc, #184]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a2d      	ldr	r2, [pc, #180]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ab6:	f7fd ff23 	bl	8001900 <HAL_GetTick>
 8003aba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003abc:	e008      	b.n	8003ad0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003abe:	f7fd ff1f 	bl	8001900 <HAL_GetTick>
 8003ac2:	4602      	mov	r2, r0
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	1ad3      	subs	r3, r2, r3
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d901      	bls.n	8003ad0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003acc:	2303      	movs	r3, #3
 8003ace:	e099      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ad0:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f0      	bne.n	8003abe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003adc:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <HAL_RCC_OscConfig+0x77c>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003aec:	3a01      	subs	r2, #1
 8003aee:	0112      	lsls	r2, r2, #4
 8003af0:	4311      	orrs	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003af6:	0212      	lsls	r2, r2, #8
 8003af8:	4311      	orrs	r1, r2
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003afe:	0852      	lsrs	r2, r2, #1
 8003b00:	3a01      	subs	r2, #1
 8003b02:	0552      	lsls	r2, r2, #21
 8003b04:	4311      	orrs	r1, r2
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003b0a:	0852      	lsrs	r2, r2, #1
 8003b0c:	3a01      	subs	r2, #1
 8003b0e:	0652      	lsls	r2, r2, #25
 8003b10:	4311      	orrs	r1, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b16:	06d2      	lsls	r2, r2, #27
 8003b18:	430a      	orrs	r2, r1
 8003b1a:	4912      	ldr	r1, [pc, #72]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a0f      	ldr	r2, [pc, #60]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a0c      	ldr	r2, [pc, #48]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b36:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003b38:	f7fd fee2 	bl	8001900 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fd fede 	bl	8001900 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e058      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b52:	4b04      	ldr	r3, [pc, #16]	; (8003b64 <HAL_RCC_OscConfig+0x778>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003b5e:	e050      	b.n	8003c02 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e04f      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
 8003b64:	40021000 	.word	0x40021000
 8003b68:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b6c:	4b27      	ldr	r3, [pc, #156]	; (8003c0c <HAL_RCC_OscConfig+0x820>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d144      	bne.n	8003c02 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003b78:	4b24      	ldr	r3, [pc, #144]	; (8003c0c <HAL_RCC_OscConfig+0x820>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a23      	ldr	r2, [pc, #140]	; (8003c0c <HAL_RCC_OscConfig+0x820>)
 8003b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b82:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <HAL_RCC_OscConfig+0x820>)
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	4a20      	ldr	r2, [pc, #128]	; (8003c0c <HAL_RCC_OscConfig+0x820>)
 8003b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003b90:	f7fd feb6 	bl	8001900 <HAL_GetTick>
 8003b94:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b96:	e008      	b.n	8003baa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b98:	f7fd feb2 	bl	8001900 <HAL_GetTick>
 8003b9c:	4602      	mov	r2, r0
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1ad3      	subs	r3, r2, r3
 8003ba2:	2b02      	cmp	r3, #2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e02c      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003baa:	4b18      	ldr	r3, [pc, #96]	; (8003c0c <HAL_RCC_OscConfig+0x820>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0f0      	beq.n	8003b98 <HAL_RCC_OscConfig+0x7ac>
 8003bb6:	e024      	b.n	8003c02 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	2b0c      	cmp	r3, #12
 8003bbc:	d01f      	beq.n	8003bfe <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bbe:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <HAL_RCC_OscConfig+0x820>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a12      	ldr	r2, [pc, #72]	; (8003c0c <HAL_RCC_OscConfig+0x820>)
 8003bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bca:	f7fd fe99 	bl	8001900 <HAL_GetTick>
 8003bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd2:	f7fd fe95 	bl	8001900 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e00f      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be4:	4b09      	ldr	r3, [pc, #36]	; (8003c0c <HAL_RCC_OscConfig+0x820>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1f0      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003bf0:	4b06      	ldr	r3, [pc, #24]	; (8003c0c <HAL_RCC_OscConfig+0x820>)
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	4905      	ldr	r1, [pc, #20]	; (8003c0c <HAL_RCC_OscConfig+0x820>)
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCC_OscConfig+0x824>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	60cb      	str	r3, [r1, #12]
 8003bfc:	e001      	b.n	8003c02 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3720      	adds	r7, #32
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	feeefffc 	.word	0xfeeefffc

08003c14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0e7      	b.n	8003df8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c28:	4b75      	ldr	r3, [pc, #468]	; (8003e00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d910      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c36:	4b72      	ldr	r3, [pc, #456]	; (8003e00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f023 0207 	bic.w	r2, r3, #7
 8003c3e:	4970      	ldr	r1, [pc, #448]	; (8003e00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b6e      	ldr	r3, [pc, #440]	; (8003e00 <HAL_RCC_ClockConfig+0x1ec>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0cf      	b.n	8003df8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d010      	beq.n	8003c86 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	4b66      	ldr	r3, [pc, #408]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d908      	bls.n	8003c86 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c74:	4b63      	ldr	r3, [pc, #396]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	4960      	ldr	r1, [pc, #384]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d04c      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	d107      	bne.n	8003caa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c9a:	4b5a      	ldr	r3, [pc, #360]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d121      	bne.n	8003cea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e0a6      	b.n	8003df8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb2:	4b54      	ldr	r3, [pc, #336]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d115      	bne.n	8003cea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e09a      	b.n	8003df8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cca:	4b4e      	ldr	r3, [pc, #312]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e08e      	b.n	8003df8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cda:	4b4a      	ldr	r3, [pc, #296]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e086      	b.n	8003df8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003cea:	4b46      	ldr	r3, [pc, #280]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f023 0203 	bic.w	r2, r3, #3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	4943      	ldr	r1, [pc, #268]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cfc:	f7fd fe00 	bl	8001900 <HAL_GetTick>
 8003d00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	e00a      	b.n	8003d1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d04:	f7fd fdfc 	bl	8001900 <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e06e      	b.n	8003df8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d1a:	4b3a      	ldr	r3, [pc, #232]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	f003 020c 	and.w	r2, r3, #12
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	429a      	cmp	r2, r3
 8003d2a:	d1eb      	bne.n	8003d04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d010      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	4b31      	ldr	r3, [pc, #196]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d208      	bcs.n	8003d5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d48:	4b2e      	ldr	r3, [pc, #184]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	492b      	ldr	r1, [pc, #172]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d5a:	4b29      	ldr	r3, [pc, #164]	; (8003e00 <HAL_RCC_ClockConfig+0x1ec>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d210      	bcs.n	8003d8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d68:	4b25      	ldr	r3, [pc, #148]	; (8003e00 <HAL_RCC_ClockConfig+0x1ec>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f023 0207 	bic.w	r2, r3, #7
 8003d70:	4923      	ldr	r1, [pc, #140]	; (8003e00 <HAL_RCC_ClockConfig+0x1ec>)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d78:	4b21      	ldr	r3, [pc, #132]	; (8003e00 <HAL_RCC_ClockConfig+0x1ec>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0307 	and.w	r3, r3, #7
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d001      	beq.n	8003d8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e036      	b.n	8003df8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d008      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d96:	4b1b      	ldr	r3, [pc, #108]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	4918      	ldr	r1, [pc, #96]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d009      	beq.n	8003dc8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003db4:	4b13      	ldr	r3, [pc, #76]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	4910      	ldr	r1, [pc, #64]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003dc8:	f000 f824 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b0d      	ldr	r3, [pc, #52]	; (8003e04 <HAL_RCC_ClockConfig+0x1f0>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	091b      	lsrs	r3, r3, #4
 8003dd4:	f003 030f 	and.w	r3, r3, #15
 8003dd8:	490b      	ldr	r1, [pc, #44]	; (8003e08 <HAL_RCC_ClockConfig+0x1f4>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	f003 031f 	and.w	r3, r3, #31
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
 8003de4:	4a09      	ldr	r2, [pc, #36]	; (8003e0c <HAL_RCC_ClockConfig+0x1f8>)
 8003de6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003de8:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_RCC_ClockConfig+0x1fc>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fd fd37 	bl	8001860 <HAL_InitTick>
 8003df2:	4603      	mov	r3, r0
 8003df4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003df6:	7afb      	ldrb	r3, [r7, #11]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	40022000 	.word	0x40022000
 8003e04:	40021000 	.word	0x40021000
 8003e08:	080067fc 	.word	0x080067fc
 8003e0c:	20000004 	.word	0x20000004
 8003e10:	20000008 	.word	0x20000008

08003e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b089      	sub	sp, #36	; 0x24
 8003e18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e22:	4b3e      	ldr	r3, [pc, #248]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f003 030c 	and.w	r3, r3, #12
 8003e2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e2c:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	f003 0303 	and.w	r3, r3, #3
 8003e34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_GetSysClockFreq+0x34>
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	d121      	bne.n	8003e86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d11e      	bne.n	8003e86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e48:	4b34      	ldr	r3, [pc, #208]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d107      	bne.n	8003e64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e54:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	f003 030f 	and.w	r3, r3, #15
 8003e60:	61fb      	str	r3, [r7, #28]
 8003e62:	e005      	b.n	8003e70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e64:	4b2d      	ldr	r3, [pc, #180]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	091b      	lsrs	r3, r3, #4
 8003e6a:	f003 030f 	and.w	r3, r3, #15
 8003e6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003e70:	4a2b      	ldr	r2, [pc, #172]	; (8003f20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d10d      	bne.n	8003e9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e84:	e00a      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d102      	bne.n	8003e92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003e8c:	4b25      	ldr	r3, [pc, #148]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8003e8e:	61bb      	str	r3, [r7, #24]
 8003e90:	e004      	b.n	8003e9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d101      	bne.n	8003e9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003e98:	4b23      	ldr	r3, [pc, #140]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8003e9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	2b0c      	cmp	r3, #12
 8003ea0:	d134      	bne.n	8003f0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ea2:	4b1e      	ldr	r3, [pc, #120]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 0303 	and.w	r3, r3, #3
 8003eaa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d003      	beq.n	8003eba <HAL_RCC_GetSysClockFreq+0xa6>
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d003      	beq.n	8003ec0 <HAL_RCC_GetSysClockFreq+0xac>
 8003eb8:	e005      	b.n	8003ec6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003eba:	4b1a      	ldr	r3, [pc, #104]	; (8003f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ebc:	617b      	str	r3, [r7, #20]
      break;
 8003ebe:	e005      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003ec0:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ec2:	617b      	str	r3, [r7, #20]
      break;
 8003ec4:	e002      	b.n	8003ecc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	617b      	str	r3, [r7, #20]
      break;
 8003eca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	091b      	lsrs	r3, r3, #4
 8003ed2:	f003 0307 	and.w	r3, r3, #7
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	0a1b      	lsrs	r3, r3, #8
 8003ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	fb03 f202 	mul.w	r2, r3, r2
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ef2:	4b0a      	ldr	r3, [pc, #40]	; (8003f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	0e5b      	lsrs	r3, r3, #25
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	3301      	adds	r3, #1
 8003efe:	005b      	lsls	r3, r3, #1
 8003f00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003f02:	697a      	ldr	r2, [r7, #20]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3724      	adds	r7, #36	; 0x24
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	08006814 	.word	0x08006814
 8003f24:	00f42400 	.word	0x00f42400
 8003f28:	007a1200 	.word	0x007a1200

08003f2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f30:	4b03      	ldr	r3, [pc, #12]	; (8003f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f32:	681b      	ldr	r3, [r3, #0]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	20000004 	.word	0x20000004

08003f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f48:	f7ff fff0 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	0a1b      	lsrs	r3, r3, #8
 8003f54:	f003 0307 	and.w	r3, r3, #7
 8003f58:	4904      	ldr	r1, [pc, #16]	; (8003f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f5a:	5ccb      	ldrb	r3, [r1, r3]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	40021000 	.word	0x40021000
 8003f6c:	0800680c 	.word	0x0800680c

08003f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003f74:	f7ff ffda 	bl	8003f2c <HAL_RCC_GetHCLKFreq>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	0adb      	lsrs	r3, r3, #11
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	4904      	ldr	r1, [pc, #16]	; (8003f98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003f86:	5ccb      	ldrb	r3, [r1, r3]
 8003f88:	f003 031f 	and.w	r3, r3, #31
 8003f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	bd80      	pop	{r7, pc}
 8003f94:	40021000 	.word	0x40021000
 8003f98:	0800680c 	.word	0x0800680c

08003f9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003fa8:	4b2a      	ldr	r3, [pc, #168]	; (8004054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003fb4:	f7ff f9b6 	bl	8003324 <HAL_PWREx_GetVoltageRange>
 8003fb8:	6178      	str	r0, [r7, #20]
 8003fba:	e014      	b.n	8003fe6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003fbc:	4b25      	ldr	r3, [pc, #148]	; (8004054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	4a24      	ldr	r2, [pc, #144]	; (8004054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc8:	4b22      	ldr	r3, [pc, #136]	; (8004054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	60fb      	str	r3, [r7, #12]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003fd4:	f7ff f9a6 	bl	8003324 <HAL_PWREx_GetVoltageRange>
 8003fd8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003fda:	4b1e      	ldr	r3, [pc, #120]	; (8004054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fde:	4a1d      	ldr	r2, [pc, #116]	; (8004054 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fec:	d10b      	bne.n	8004006 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b80      	cmp	r3, #128	; 0x80
 8003ff2:	d919      	bls.n	8004028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2ba0      	cmp	r3, #160	; 0xa0
 8003ff8:	d902      	bls.n	8004000 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	613b      	str	r3, [r7, #16]
 8003ffe:	e013      	b.n	8004028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004000:	2301      	movs	r3, #1
 8004002:	613b      	str	r3, [r7, #16]
 8004004:	e010      	b.n	8004028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b80      	cmp	r3, #128	; 0x80
 800400a:	d902      	bls.n	8004012 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800400c:	2303      	movs	r3, #3
 800400e:	613b      	str	r3, [r7, #16]
 8004010:	e00a      	b.n	8004028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b80      	cmp	r3, #128	; 0x80
 8004016:	d102      	bne.n	800401e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004018:	2302      	movs	r3, #2
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	e004      	b.n	8004028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b70      	cmp	r3, #112	; 0x70
 8004022:	d101      	bne.n	8004028 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004024:	2301      	movs	r3, #1
 8004026:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f023 0207 	bic.w	r2, r3, #7
 8004030:	4909      	ldr	r1, [pc, #36]	; (8004058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	4313      	orrs	r3, r2
 8004036:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004038:	4b07      	ldr	r3, [pc, #28]	; (8004058 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	693a      	ldr	r2, [r7, #16]
 8004042:	429a      	cmp	r2, r3
 8004044:	d001      	beq.n	800404a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3718      	adds	r7, #24
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000
 8004058:	40022000 	.word	0x40022000

0800405c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004064:	2300      	movs	r3, #0
 8004066:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004068:	2300      	movs	r3, #0
 800406a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004074:	2b00      	cmp	r3, #0
 8004076:	d031      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800407c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004080:	d01a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004082:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004086:	d814      	bhi.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004088:	2b00      	cmp	r3, #0
 800408a:	d009      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800408c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004090:	d10f      	bne.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004092:	4b5d      	ldr	r3, [pc, #372]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	4a5c      	ldr	r2, [pc, #368]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800409c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800409e:	e00c      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fa44 	bl	8004534 <RCCEx_PLLSAI1_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80040b0:	e003      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	74fb      	strb	r3, [r7, #19]
      break;
 80040b6:	e000      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80040b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040ba:	7cfb      	ldrb	r3, [r7, #19]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10b      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040c0:	4b51      	ldr	r3, [pc, #324]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ce:	494e      	ldr	r1, [pc, #312]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040d0:	4313      	orrs	r3, r2
 80040d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80040d6:	e001      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d8:	7cfb      	ldrb	r3, [r7, #19]
 80040da:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 809e 	beq.w	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ea:	2300      	movs	r3, #0
 80040ec:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040ee:	4b46      	ldr	r3, [pc, #280]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80040f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004104:	4b40      	ldr	r3, [pc, #256]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004108:	4a3f      	ldr	r2, [pc, #252]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800410a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410e:	6593      	str	r3, [r2, #88]	; 0x58
 8004110:	4b3d      	ldr	r3, [pc, #244]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004118:	60bb      	str	r3, [r7, #8]
 800411a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800411c:	2301      	movs	r3, #1
 800411e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004120:	4b3a      	ldr	r3, [pc, #232]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a39      	ldr	r2, [pc, #228]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800412c:	f7fd fbe8 	bl	8001900 <HAL_GetTick>
 8004130:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004132:	e009      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004134:	f7fd fbe4 	bl	8001900 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d902      	bls.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	74fb      	strb	r3, [r7, #19]
        break;
 8004146:	e005      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004148:	4b30      	ldr	r3, [pc, #192]	; (800420c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ef      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004154:	7cfb      	ldrb	r3, [r7, #19]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d15a      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800415a:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800415c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004164:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d01e      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	429a      	cmp	r2, r3
 8004174:	d019      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004176:	4b24      	ldr	r3, [pc, #144]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004180:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004182:	4b21      	ldr	r3, [pc, #132]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	4a1f      	ldr	r2, [pc, #124]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800418a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800418e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004192:	4b1d      	ldr	r3, [pc, #116]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004198:	4a1b      	ldr	r2, [pc, #108]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800419a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800419e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041a2:	4a19      	ldr	r2, [pc, #100]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d016      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b4:	f7fd fba4 	bl	8001900 <HAL_GetTick>
 80041b8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ba:	e00b      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fd fba0 	bl	8001900 <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d902      	bls.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	74fb      	strb	r3, [r7, #19]
            break;
 80041d2:	e006      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d4:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0ec      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80041e2:	7cfb      	ldrb	r3, [r7, #19]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10b      	bne.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041e8:	4b07      	ldr	r3, [pc, #28]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041f6:	4904      	ldr	r1, [pc, #16]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041fe:	e009      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004200:	7cfb      	ldrb	r3, [r7, #19]
 8004202:	74bb      	strb	r3, [r7, #18]
 8004204:	e006      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004206:	bf00      	nop
 8004208:	40021000 	.word	0x40021000
 800420c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004214:	7c7b      	ldrb	r3, [r7, #17]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d105      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800421a:	4b9e      	ldr	r3, [pc, #632]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	4a9d      	ldr	r2, [pc, #628]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004220:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004224:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004232:	4b98      	ldr	r3, [pc, #608]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004238:	f023 0203 	bic.w	r2, r3, #3
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	4994      	ldr	r1, [pc, #592]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004242:	4313      	orrs	r3, r2
 8004244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00a      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004254:	4b8f      	ldr	r3, [pc, #572]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425a:	f023 020c 	bic.w	r2, r3, #12
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	498c      	ldr	r1, [pc, #560]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004264:	4313      	orrs	r3, r2
 8004266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00a      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004276:	4b87      	ldr	r3, [pc, #540]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004284:	4983      	ldr	r1, [pc, #524]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00a      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004298:	4b7e      	ldr	r3, [pc, #504]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800429e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	497b      	ldr	r1, [pc, #492]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0320 	and.w	r3, r3, #32
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042ba:	4b76      	ldr	r3, [pc, #472]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c8:	4972      	ldr	r1, [pc, #456]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042dc:	4b6d      	ldr	r3, [pc, #436]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ea:	496a      	ldr	r1, [pc, #424]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042fe:	4b65      	ldr	r3, [pc, #404]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004304:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800430c:	4961      	ldr	r1, [pc, #388]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004320:	4b5c      	ldr	r3, [pc, #368]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432e:	4959      	ldr	r1, [pc, #356]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00a      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004342:	4b54      	ldr	r3, [pc, #336]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004348:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004350:	4950      	ldr	r1, [pc, #320]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004352:	4313      	orrs	r3, r2
 8004354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004364:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004372:	4948      	ldr	r1, [pc, #288]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00a      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004386:	4b43      	ldr	r3, [pc, #268]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004388:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800438c:	f023 0203 	bic.w	r2, r3, #3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	493f      	ldr	r1, [pc, #252]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004396:	4313      	orrs	r3, r2
 8004398:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d028      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043a8:	4b3a      	ldr	r3, [pc, #232]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b6:	4937      	ldr	r1, [pc, #220]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043c6:	d106      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c8:	4b32      	ldr	r3, [pc, #200]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a31      	ldr	r2, [pc, #196]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80043ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043d2:	60d3      	str	r3, [r2, #12]
 80043d4:	e011      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043de:	d10c      	bne.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	2101      	movs	r1, #1
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 f8a4 	bl	8004534 <RCCEx_PLLSAI1_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80043f0:	7cfb      	ldrb	r3, [r7, #19]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80043f6:	7cfb      	ldrb	r3, [r7, #19]
 80043f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d028      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004406:	4b23      	ldr	r3, [pc, #140]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004414:	491f      	ldr	r1, [pc, #124]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004416:	4313      	orrs	r3, r2
 8004418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004424:	d106      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	4a1a      	ldr	r2, [pc, #104]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800442c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004430:	60d3      	str	r3, [r2, #12]
 8004432:	e011      	b.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004438:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800443c:	d10c      	bne.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	3304      	adds	r3, #4
 8004442:	2101      	movs	r1, #1
 8004444:	4618      	mov	r0, r3
 8004446:	f000 f875 	bl	8004534 <RCCEx_PLLSAI1_Config>
 800444a:	4603      	mov	r3, r0
 800444c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800444e:	7cfb      	ldrb	r3, [r7, #19]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004454:	7cfb      	ldrb	r3, [r7, #19]
 8004456:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d02b      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004472:	4908      	ldr	r1, [pc, #32]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004474:	4313      	orrs	r3, r2
 8004476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004482:	d109      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a02      	ldr	r2, [pc, #8]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800448a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800448e:	60d3      	str	r3, [r2, #12]
 8004490:	e014      	b.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004492:	bf00      	nop
 8004494:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044a0:	d10c      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3304      	adds	r3, #4
 80044a6:	2101      	movs	r1, #1
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 f843 	bl	8004534 <RCCEx_PLLSAI1_Config>
 80044ae:	4603      	mov	r3, r0
 80044b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044b2:	7cfb      	ldrb	r3, [r7, #19]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80044b8:	7cfb      	ldrb	r3, [r7, #19]
 80044ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01c      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044c8:	4b19      	ldr	r3, [pc, #100]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d6:	4916      	ldr	r1, [pc, #88]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044e6:	d10c      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3304      	adds	r3, #4
 80044ec:	2102      	movs	r1, #2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 f820 	bl	8004534 <RCCEx_PLLSAI1_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044f8:	7cfb      	ldrb	r3, [r7, #19]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00a      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800450e:	4b08      	ldr	r3, [pc, #32]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004514:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800451c:	4904      	ldr	r1, [pc, #16]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800451e:	4313      	orrs	r3, r2
 8004520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004524:	7cbb      	ldrb	r3, [r7, #18]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40021000 	.word	0x40021000

08004534 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800453e:	2300      	movs	r3, #0
 8004540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004542:	4b74      	ldr	r3, [pc, #464]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d018      	beq.n	8004580 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800454e:	4b71      	ldr	r3, [pc, #452]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	f003 0203 	and.w	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	429a      	cmp	r2, r3
 800455c:	d10d      	bne.n	800457a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
       ||
 8004562:	2b00      	cmp	r3, #0
 8004564:	d009      	beq.n	800457a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004566:	4b6b      	ldr	r3, [pc, #428]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	091b      	lsrs	r3, r3, #4
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
       ||
 8004576:	429a      	cmp	r2, r3
 8004578:	d047      	beq.n	800460a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	73fb      	strb	r3, [r7, #15]
 800457e:	e044      	b.n	800460a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b03      	cmp	r3, #3
 8004586:	d018      	beq.n	80045ba <RCCEx_PLLSAI1_Config+0x86>
 8004588:	2b03      	cmp	r3, #3
 800458a:	d825      	bhi.n	80045d8 <RCCEx_PLLSAI1_Config+0xa4>
 800458c:	2b01      	cmp	r3, #1
 800458e:	d002      	beq.n	8004596 <RCCEx_PLLSAI1_Config+0x62>
 8004590:	2b02      	cmp	r3, #2
 8004592:	d009      	beq.n	80045a8 <RCCEx_PLLSAI1_Config+0x74>
 8004594:	e020      	b.n	80045d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004596:	4b5f      	ldr	r3, [pc, #380]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d11d      	bne.n	80045de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045a6:	e01a      	b.n	80045de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045a8:	4b5a      	ldr	r3, [pc, #360]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d116      	bne.n	80045e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b8:	e013      	b.n	80045e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045ba:	4b56      	ldr	r3, [pc, #344]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10f      	bne.n	80045e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045c6:	4b53      	ldr	r3, [pc, #332]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d109      	bne.n	80045e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045d6:	e006      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	73fb      	strb	r3, [r7, #15]
      break;
 80045dc:	e004      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045de:	bf00      	nop
 80045e0:	e002      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045e2:	bf00      	nop
 80045e4:	e000      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80045e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10d      	bne.n	800460a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80045ee:	4b49      	ldr	r3, [pc, #292]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6819      	ldr	r1, [r3, #0]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	430b      	orrs	r3, r1
 8004604:	4943      	ldr	r1, [pc, #268]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800460a:	7bfb      	ldrb	r3, [r7, #15]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d17c      	bne.n	800470a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004610:	4b40      	ldr	r3, [pc, #256]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a3f      	ldr	r2, [pc, #252]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800461a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800461c:	f7fd f970 	bl	8001900 <HAL_GetTick>
 8004620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004622:	e009      	b.n	8004638 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004624:	f7fd f96c 	bl	8001900 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	2b02      	cmp	r3, #2
 8004630:	d902      	bls.n	8004638 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	73fb      	strb	r3, [r7, #15]
        break;
 8004636:	e005      	b.n	8004644 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004638:	4b36      	ldr	r3, [pc, #216]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1ef      	bne.n	8004624 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d15f      	bne.n	800470a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d110      	bne.n	8004672 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004650:	4b30      	ldr	r3, [pc, #192]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004658:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6892      	ldr	r2, [r2, #8]
 8004660:	0211      	lsls	r1, r2, #8
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68d2      	ldr	r2, [r2, #12]
 8004666:	06d2      	lsls	r2, r2, #27
 8004668:	430a      	orrs	r2, r1
 800466a:	492a      	ldr	r1, [pc, #168]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800466c:	4313      	orrs	r3, r2
 800466e:	610b      	str	r3, [r1, #16]
 8004670:	e027      	b.n	80046c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d112      	bne.n	800469e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004678:	4b26      	ldr	r3, [pc, #152]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	6892      	ldr	r2, [r2, #8]
 8004688:	0211      	lsls	r1, r2, #8
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	6912      	ldr	r2, [r2, #16]
 800468e:	0852      	lsrs	r2, r2, #1
 8004690:	3a01      	subs	r2, #1
 8004692:	0552      	lsls	r2, r2, #21
 8004694:	430a      	orrs	r2, r1
 8004696:	491f      	ldr	r1, [pc, #124]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004698:	4313      	orrs	r3, r2
 800469a:	610b      	str	r3, [r1, #16]
 800469c:	e011      	b.n	80046c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800469e:	4b1d      	ldr	r3, [pc, #116]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80046a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	6892      	ldr	r2, [r2, #8]
 80046ae:	0211      	lsls	r1, r2, #8
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	6952      	ldr	r2, [r2, #20]
 80046b4:	0852      	lsrs	r2, r2, #1
 80046b6:	3a01      	subs	r2, #1
 80046b8:	0652      	lsls	r2, r2, #25
 80046ba:	430a      	orrs	r2, r1
 80046bc:	4915      	ldr	r1, [pc, #84]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046c2:	4b14      	ldr	r3, [pc, #80]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a13      	ldr	r2, [pc, #76]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ce:	f7fd f917 	bl	8001900 <HAL_GetTick>
 80046d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046d4:	e009      	b.n	80046ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046d6:	f7fd f913 	bl	8001900 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d902      	bls.n	80046ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	73fb      	strb	r3, [r7, #15]
          break;
 80046e8:	e005      	b.n	80046f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046ea:	4b0a      	ldr	r3, [pc, #40]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d0ef      	beq.n	80046d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d106      	bne.n	800470a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046fc:	4b05      	ldr	r3, [pc, #20]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80046fe:	691a      	ldr	r2, [r3, #16]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	699b      	ldr	r3, [r3, #24]
 8004704:	4903      	ldr	r1, [pc, #12]	; (8004714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004706:	4313      	orrs	r3, r2
 8004708:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800470a:	7bfb      	ldrb	r3, [r7, #15]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000

08004718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b082      	sub	sp, #8
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e049      	b.n	80047be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7fc ff00 	bl	8001544 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	4619      	mov	r1, r3
 8004756:	4610      	mov	r0, r2
 8004758:	f000 fe36 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
	...

080047c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b085      	sub	sp, #20
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d001      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e040      	b.n	8004862 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a1c      	ldr	r2, [pc, #112]	; (8004870 <HAL_TIM_Base_Start_IT+0xa8>)
 80047fe:	4293      	cmp	r3, r2
 8004800:	d00e      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x58>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800480a:	d009      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x58>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a18      	ldr	r2, [pc, #96]	; (8004874 <HAL_TIM_Base_Start_IT+0xac>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d004      	beq.n	8004820 <HAL_TIM_Base_Start_IT+0x58>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a17      	ldr	r2, [pc, #92]	; (8004878 <HAL_TIM_Base_Start_IT+0xb0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d115      	bne.n	800484c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689a      	ldr	r2, [r3, #8]
 8004826:	4b15      	ldr	r3, [pc, #84]	; (800487c <HAL_TIM_Base_Start_IT+0xb4>)
 8004828:	4013      	ands	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2b06      	cmp	r3, #6
 8004830:	d015      	beq.n	800485e <HAL_TIM_Base_Start_IT+0x96>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004838:	d011      	beq.n	800485e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f042 0201 	orr.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484a:	e008      	b.n	800485e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e000      	b.n	8004860 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	40012c00 	.word	0x40012c00
 8004874:	40000400 	.word	0x40000400
 8004878:	40014000 	.word	0x40014000
 800487c:	00010007 	.word	0x00010007

08004880 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800488e:	2301      	movs	r3, #1
 8004890:	e049      	b.n	8004926 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f841 	bl	800492e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3304      	adds	r3, #4
 80048bc:	4619      	mov	r1, r3
 80048be:	4610      	mov	r0, r2
 80048c0:	f000 fd82 	bl	80053c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800492e:	b480      	push	{r7}
 8004930:	b083      	sub	sp, #12
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr
	...

08004944 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d109      	bne.n	8004968 <HAL_TIM_PWM_Start+0x24>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b01      	cmp	r3, #1
 800495e:	bf14      	ite	ne
 8004960:	2301      	movne	r3, #1
 8004962:	2300      	moveq	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	e03c      	b.n	80049e2 <HAL_TIM_PWM_Start+0x9e>
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	2b04      	cmp	r3, #4
 800496c:	d109      	bne.n	8004982 <HAL_TIM_PWM_Start+0x3e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b01      	cmp	r3, #1
 8004978:	bf14      	ite	ne
 800497a:	2301      	movne	r3, #1
 800497c:	2300      	moveq	r3, #0
 800497e:	b2db      	uxtb	r3, r3
 8004980:	e02f      	b.n	80049e2 <HAL_TIM_PWM_Start+0x9e>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	2b08      	cmp	r3, #8
 8004986:	d109      	bne.n	800499c <HAL_TIM_PWM_Start+0x58>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2b01      	cmp	r3, #1
 8004992:	bf14      	ite	ne
 8004994:	2301      	movne	r3, #1
 8004996:	2300      	moveq	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e022      	b.n	80049e2 <HAL_TIM_PWM_Start+0x9e>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	2b0c      	cmp	r3, #12
 80049a0:	d109      	bne.n	80049b6 <HAL_TIM_PWM_Start+0x72>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	bf14      	ite	ne
 80049ae:	2301      	movne	r3, #1
 80049b0:	2300      	moveq	r3, #0
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	e015      	b.n	80049e2 <HAL_TIM_PWM_Start+0x9e>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d109      	bne.n	80049d0 <HAL_TIM_PWM_Start+0x8c>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	bf14      	ite	ne
 80049c8:	2301      	movne	r3, #1
 80049ca:	2300      	moveq	r3, #0
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	e008      	b.n	80049e2 <HAL_TIM_PWM_Start+0x9e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e083      	b.n	8004af2 <HAL_TIM_PWM_Start+0x1ae>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d104      	bne.n	80049fa <HAL_TIM_PWM_Start+0xb6>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2202      	movs	r2, #2
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049f8:	e023      	b.n	8004a42 <HAL_TIM_PWM_Start+0xfe>
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	2b04      	cmp	r3, #4
 80049fe:	d104      	bne.n	8004a0a <HAL_TIM_PWM_Start+0xc6>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a08:	e01b      	b.n	8004a42 <HAL_TIM_PWM_Start+0xfe>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d104      	bne.n	8004a1a <HAL_TIM_PWM_Start+0xd6>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a18:	e013      	b.n	8004a42 <HAL_TIM_PWM_Start+0xfe>
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b0c      	cmp	r3, #12
 8004a1e:	d104      	bne.n	8004a2a <HAL_TIM_PWM_Start+0xe6>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2202      	movs	r2, #2
 8004a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a28:	e00b      	b.n	8004a42 <HAL_TIM_PWM_Start+0xfe>
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	2b10      	cmp	r3, #16
 8004a2e:	d104      	bne.n	8004a3a <HAL_TIM_PWM_Start+0xf6>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a38:	e003      	b.n	8004a42 <HAL_TIM_PWM_Start+0xfe>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2201      	movs	r2, #1
 8004a48:	6839      	ldr	r1, [r7, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f001 f842 	bl	8005ad4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a29      	ldr	r2, [pc, #164]	; (8004afc <HAL_TIM_PWM_Start+0x1b8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d009      	beq.n	8004a6e <HAL_TIM_PWM_Start+0x12a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a28      	ldr	r2, [pc, #160]	; (8004b00 <HAL_TIM_PWM_Start+0x1bc>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d004      	beq.n	8004a6e <HAL_TIM_PWM_Start+0x12a>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a26      	ldr	r2, [pc, #152]	; (8004b04 <HAL_TIM_PWM_Start+0x1c0>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d101      	bne.n	8004a72 <HAL_TIM_PWM_Start+0x12e>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <HAL_TIM_PWM_Start+0x130>
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d007      	beq.n	8004a88 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a86:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1b      	ldr	r2, [pc, #108]	; (8004afc <HAL_TIM_PWM_Start+0x1b8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00e      	beq.n	8004ab0 <HAL_TIM_PWM_Start+0x16c>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a9a:	d009      	beq.n	8004ab0 <HAL_TIM_PWM_Start+0x16c>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a19      	ldr	r2, [pc, #100]	; (8004b08 <HAL_TIM_PWM_Start+0x1c4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d004      	beq.n	8004ab0 <HAL_TIM_PWM_Start+0x16c>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a15      	ldr	r2, [pc, #84]	; (8004b00 <HAL_TIM_PWM_Start+0x1bc>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d115      	bne.n	8004adc <HAL_TIM_PWM_Start+0x198>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	689a      	ldr	r2, [r3, #8]
 8004ab6:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <HAL_TIM_PWM_Start+0x1c8>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b06      	cmp	r3, #6
 8004ac0:	d015      	beq.n	8004aee <HAL_TIM_PWM_Start+0x1aa>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac8:	d011      	beq.n	8004aee <HAL_TIM_PWM_Start+0x1aa>
    {
      __HAL_TIM_ENABLE(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f042 0201 	orr.w	r2, r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ada:	e008      	b.n	8004aee <HAL_TIM_PWM_Start+0x1aa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0201 	orr.w	r2, r2, #1
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	e000      	b.n	8004af0 <HAL_TIM_PWM_Start+0x1ac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3710      	adds	r7, #16
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40014000 	.word	0x40014000
 8004b04:	40014400 	.word	0x40014400
 8004b08:	40000400 	.word	0x40000400
 8004b0c:	00010007 	.word	0x00010007

08004b10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e097      	b.n	8004c54 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d106      	bne.n	8004b3e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f7fc fd23 	bl	8001584 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8004b54:	f023 0307 	bic.w	r3, r3, #7
 8004b58:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3304      	adds	r3, #4
 8004b62:	4619      	mov	r1, r3
 8004b64:	4610      	mov	r0, r2
 8004b66:	f000 fc2f 	bl	80053c8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b92:	f023 0303 	bic.w	r3, r3, #3
 8004b96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004bb0:	f023 030c 	bic.w	r3, r3, #12
 8004bb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68da      	ldr	r2, [r3, #12]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	69db      	ldr	r3, [r3, #28]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	011a      	lsls	r2, r3, #4
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	031b      	lsls	r3, r3, #12
 8004be0:	4313      	orrs	r3, r2
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004bee:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004bf6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	695b      	ldr	r3, [r3, #20]
 8004c00:	011b      	lsls	r3, r3, #4
 8004c02:	4313      	orrs	r3, r2
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	693a      	ldr	r2, [r7, #16]
 8004c18:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c6c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c74:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c7c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c84:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d110      	bne.n	8004cae <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d102      	bne.n	8004c98 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c92:	7b7b      	ldrb	r3, [r7, #13]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d001      	beq.n	8004c9c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e089      	b.n	8004db0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cac:	e031      	b.n	8004d12 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d110      	bne.n	8004cd6 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb4:	7bbb      	ldrb	r3, [r7, #14]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d102      	bne.n	8004cc0 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cba:	7b3b      	ldrb	r3, [r7, #12]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d001      	beq.n	8004cc4 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e075      	b.n	8004db0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd4:	e01d      	b.n	8004d12 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d108      	bne.n	8004cee <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cdc:	7bbb      	ldrb	r3, [r7, #14]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d105      	bne.n	8004cee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ce2:	7b7b      	ldrb	r3, [r7, #13]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d102      	bne.n	8004cee <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ce8:	7b3b      	ldrb	r3, [r7, #12]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d001      	beq.n	8004cf2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e05e      	b.n	8004db0 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2202      	movs	r2, #2
 8004d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d003      	beq.n	8004d20 <HAL_TIM_Encoder_Start_IT+0xc4>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d010      	beq.n	8004d40 <HAL_TIM_Encoder_Start_IT+0xe4>
 8004d1e:	e01f      	b.n	8004d60 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2201      	movs	r2, #1
 8004d26:	2100      	movs	r1, #0
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f000 fed3 	bl	8005ad4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0202 	orr.w	r2, r2, #2
 8004d3c:	60da      	str	r2, [r3, #12]
      break;
 8004d3e:	e02e      	b.n	8004d9e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2201      	movs	r2, #1
 8004d46:	2104      	movs	r1, #4
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fec3 	bl	8005ad4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0204 	orr.w	r2, r2, #4
 8004d5c:	60da      	str	r2, [r3, #12]
      break;
 8004d5e:	e01e      	b.n	8004d9e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2201      	movs	r2, #1
 8004d66:	2100      	movs	r1, #0
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f000 feb3 	bl	8005ad4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2201      	movs	r2, #1
 8004d74:	2104      	movs	r1, #4
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 feac 	bl	8005ad4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68da      	ldr	r2, [r3, #12]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f042 0202 	orr.w	r2, r2, #2
 8004d8a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f042 0204 	orr.w	r2, r2, #4
 8004d9a:	60da      	str	r2, [r3, #12]
      break;
 8004d9c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f042 0201 	orr.w	r2, r2, #1
 8004dac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3710      	adds	r7, #16
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	68db      	ldr	r3, [r3, #12]
 8004dc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d020      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d01b      	beq.n	8004e1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f06f 0202 	mvn.w	r2, #2
 8004dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699b      	ldr	r3, [r3, #24]
 8004dfa:	f003 0303 	and.w	r3, r3, #3
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d003      	beq.n	8004e0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fac1 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8004e08:	e005      	b.n	8004e16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fab3 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fac4 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d020      	beq.n	8004e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d01b      	beq.n	8004e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0204 	mvn.w	r2, #4
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	699b      	ldr	r3, [r3, #24]
 8004e46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 fa9b 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 fa8d 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fa9e 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	f003 0308 	and.w	r3, r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d020      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d01b      	beq.n	8004eb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f06f 0208 	mvn.w	r2, #8
 8004e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2204      	movs	r2, #4
 8004e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f003 0303 	and.w	r3, r3, #3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d003      	beq.n	8004ea2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa75 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8004ea0:	e005      	b.n	8004eae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa67 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 fa78 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f003 0310 	and.w	r3, r3, #16
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d020      	beq.n	8004f00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d01b      	beq.n	8004f00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f06f 0210 	mvn.w	r2, #16
 8004ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2208      	movs	r2, #8
 8004ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69db      	ldr	r3, [r3, #28]
 8004ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d003      	beq.n	8004eee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fa4f 	bl	800538a <HAL_TIM_IC_CaptureCallback>
 8004eec:	e005      	b.n	8004efa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 fa41 	bl	8005376 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fa52 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00c      	beq.n	8004f24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0201 	mvn.w	r2, #1
 8004f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fb fe36 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00c      	beq.n	8004f48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fedc 	bl	8005d00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00c      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d007      	beq.n	8004f6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fed4 	bl	8005d14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00c      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d007      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fa11 	bl	80053b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00c      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f003 0320 	and.w	r3, r3, #32
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d007      	beq.n	8004fb4 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f06f 0220 	mvn.w	r2, #32
 8004fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fe9c 	bl	8005cec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fb4:	bf00      	nop
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc8:	2300      	movs	r3, #0
 8004fca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d101      	bne.n	8004fda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e0ff      	b.n	80051da <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2b14      	cmp	r3, #20
 8004fe6:	f200 80f0 	bhi.w	80051ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004fea:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff0:	08005045 	.word	0x08005045
 8004ff4:	080051cb 	.word	0x080051cb
 8004ff8:	080051cb 	.word	0x080051cb
 8004ffc:	080051cb 	.word	0x080051cb
 8005000:	08005085 	.word	0x08005085
 8005004:	080051cb 	.word	0x080051cb
 8005008:	080051cb 	.word	0x080051cb
 800500c:	080051cb 	.word	0x080051cb
 8005010:	080050c7 	.word	0x080050c7
 8005014:	080051cb 	.word	0x080051cb
 8005018:	080051cb 	.word	0x080051cb
 800501c:	080051cb 	.word	0x080051cb
 8005020:	08005107 	.word	0x08005107
 8005024:	080051cb 	.word	0x080051cb
 8005028:	080051cb 	.word	0x080051cb
 800502c:	080051cb 	.word	0x080051cb
 8005030:	08005149 	.word	0x08005149
 8005034:	080051cb 	.word	0x080051cb
 8005038:	080051cb 	.word	0x080051cb
 800503c:	080051cb 	.word	0x080051cb
 8005040:	08005189 	.word	0x08005189
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fa2a 	bl	80054a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0208 	orr.w	r2, r2, #8
 800505e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0204 	bic.w	r2, r2, #4
 800506e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6999      	ldr	r1, [r3, #24]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	619a      	str	r2, [r3, #24]
      break;
 8005082:	e0a5      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fa86 	bl	800559c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800509e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6999      	ldr	r1, [r3, #24]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	021a      	lsls	r2, r3, #8
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	619a      	str	r2, [r3, #24]
      break;
 80050c4:	e084      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fadf 	bl	8005690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0208 	orr.w	r2, r2, #8
 80050e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0204 	bic.w	r2, r2, #4
 80050f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	61da      	str	r2, [r3, #28]
      break;
 8005104:	e064      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fb37 	bl	8005780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69d9      	ldr	r1, [r3, #28]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	021a      	lsls	r2, r3, #8
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	61da      	str	r2, [r3, #28]
      break;
 8005146:	e043      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68b9      	ldr	r1, [r7, #8]
 800514e:	4618      	mov	r0, r3
 8005150:	f000 fb74 	bl	800583c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f042 0208 	orr.w	r2, r2, #8
 8005162:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0204 	bic.w	r2, r2, #4
 8005172:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	691a      	ldr	r2, [r3, #16]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005186:	e023      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fbac 	bl	80058ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	021a      	lsls	r2, r3, #8
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80051c8:	e002      	b.n	80051d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	75fb      	strb	r3, [r7, #23]
      break;
 80051ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop

080051e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIM_ConfigClockSource+0x1c>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e0b6      	b.n	800536e <HAL_TIM_ConfigClockSource+0x18a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800521e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523c:	d03e      	beq.n	80052bc <HAL_TIM_ConfigClockSource+0xd8>
 800523e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005242:	f200 8087 	bhi.w	8005354 <HAL_TIM_ConfigClockSource+0x170>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524a:	f000 8086 	beq.w	800535a <HAL_TIM_ConfigClockSource+0x176>
 800524e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005252:	d87f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 8005254:	2b70      	cmp	r3, #112	; 0x70
 8005256:	d01a      	beq.n	800528e <HAL_TIM_ConfigClockSource+0xaa>
 8005258:	2b70      	cmp	r3, #112	; 0x70
 800525a:	d87b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 800525c:	2b60      	cmp	r3, #96	; 0x60
 800525e:	d050      	beq.n	8005302 <HAL_TIM_ConfigClockSource+0x11e>
 8005260:	2b60      	cmp	r3, #96	; 0x60
 8005262:	d877      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 8005264:	2b50      	cmp	r3, #80	; 0x50
 8005266:	d03c      	beq.n	80052e2 <HAL_TIM_ConfigClockSource+0xfe>
 8005268:	2b50      	cmp	r3, #80	; 0x50
 800526a:	d873      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 800526c:	2b40      	cmp	r3, #64	; 0x40
 800526e:	d058      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0x13e>
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d86f      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 8005274:	2b30      	cmp	r3, #48	; 0x30
 8005276:	d064      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15e>
 8005278:	2b30      	cmp	r3, #48	; 0x30
 800527a:	d86b      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 800527c:	2b20      	cmp	r3, #32
 800527e:	d060      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15e>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d867      	bhi.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
 8005284:	2b00      	cmp	r3, #0
 8005286:	d05c      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15e>
 8005288:	2b10      	cmp	r3, #16
 800528a:	d05a      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x15e>
 800528c:	e062      	b.n	8005354 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800529e:	f000 fbf9 	bl	8005a94 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	609a      	str	r2, [r3, #8]
      break;
 80052ba:	e04f      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052cc:	f000 fbe2 	bl	8005a94 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052de:	609a      	str	r2, [r3, #8]
      break;
 80052e0:	e03c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052ee:	461a      	mov	r2, r3
 80052f0:	f000 fb56 	bl	80059a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2150      	movs	r1, #80	; 0x50
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 fbaf 	bl	8005a5e <TIM_ITRx_SetConfig>
      break;
 8005300:	e02c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800530e:	461a      	mov	r2, r3
 8005310:	f000 fb75 	bl	80059fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	2160      	movs	r1, #96	; 0x60
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fb9f 	bl	8005a5e <TIM_ITRx_SetConfig>
      break;
 8005320:	e01c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800532e:	461a      	mov	r2, r3
 8005330:	f000 fb36 	bl	80059a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2140      	movs	r1, #64	; 0x40
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fb8f 	bl	8005a5e <TIM_ITRx_SetConfig>
      break;
 8005340:	e00c      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4619      	mov	r1, r3
 800534c:	4610      	mov	r0, r2
 800534e:	f000 fb86 	bl	8005a5e <TIM_ITRx_SetConfig>
      break;
 8005352:	e003      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	73fb      	strb	r3, [r7, #15]
      break;
 8005358:	e000      	b.n	800535c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800535a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800536c:	7bfb      	ldrb	r3, [r7, #15]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b2:	b480      	push	{r7}
 80053b4:	b083      	sub	sp, #12
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053ba:	bf00      	nop
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
	...

080053c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a2e      	ldr	r2, [pc, #184]	; (8005494 <TIM_Base_SetConfig+0xcc>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d007      	beq.n	80053f0 <TIM_Base_SetConfig+0x28>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e6:	d003      	beq.n	80053f0 <TIM_Base_SetConfig+0x28>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a2b      	ldr	r2, [pc, #172]	; (8005498 <TIM_Base_SetConfig+0xd0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d108      	bne.n	8005402 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	4313      	orrs	r3, r2
 8005400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a23      	ldr	r2, [pc, #140]	; (8005494 <TIM_Base_SetConfig+0xcc>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d00f      	beq.n	800542a <TIM_Base_SetConfig+0x62>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005410:	d00b      	beq.n	800542a <TIM_Base_SetConfig+0x62>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a20      	ldr	r2, [pc, #128]	; (8005498 <TIM_Base_SetConfig+0xd0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d007      	beq.n	800542a <TIM_Base_SetConfig+0x62>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	4a1f      	ldr	r2, [pc, #124]	; (800549c <TIM_Base_SetConfig+0xd4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d003      	beq.n	800542a <TIM_Base_SetConfig+0x62>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a1e      	ldr	r2, [pc, #120]	; (80054a0 <TIM_Base_SetConfig+0xd8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d108      	bne.n	800543c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005430:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	4313      	orrs	r3, r2
 800543a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	695b      	ldr	r3, [r3, #20]
 8005446:	4313      	orrs	r3, r2
 8005448:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a0c      	ldr	r2, [pc, #48]	; (8005494 <TIM_Base_SetConfig+0xcc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d007      	beq.n	8005478 <TIM_Base_SetConfig+0xb0>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a0c      	ldr	r2, [pc, #48]	; (800549c <TIM_Base_SetConfig+0xd4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_Base_SetConfig+0xb0>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a0b      	ldr	r2, [pc, #44]	; (80054a0 <TIM_Base_SetConfig+0xd8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d103      	bne.n	8005480 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	691a      	ldr	r2, [r3, #16]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	615a      	str	r2, [r3, #20]
}
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	40012c00 	.word	0x40012c00
 8005498:	40000400 	.word	0x40000400
 800549c:	40014000 	.word	0x40014000
 80054a0:	40014400 	.word	0x40014400

080054a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f023 0201 	bic.w	r2, r3, #1
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0303 	bic.w	r3, r3, #3
 80054de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f023 0302 	bic.w	r3, r3, #2
 80054f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a24      	ldr	r2, [pc, #144]	; (8005590 <TIM_OC1_SetConfig+0xec>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d007      	beq.n	8005514 <TIM_OC1_SetConfig+0x70>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a23      	ldr	r2, [pc, #140]	; (8005594 <TIM_OC1_SetConfig+0xf0>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_OC1_SetConfig+0x70>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a22      	ldr	r2, [pc, #136]	; (8005598 <TIM_OC1_SetConfig+0xf4>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d10c      	bne.n	800552e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f023 0308 	bic.w	r3, r3, #8
 800551a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	4313      	orrs	r3, r2
 8005524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f023 0304 	bic.w	r3, r3, #4
 800552c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a17      	ldr	r2, [pc, #92]	; (8005590 <TIM_OC1_SetConfig+0xec>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d007      	beq.n	8005546 <TIM_OC1_SetConfig+0xa2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a16      	ldr	r2, [pc, #88]	; (8005594 <TIM_OC1_SetConfig+0xf0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_OC1_SetConfig+0xa2>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a15      	ldr	r2, [pc, #84]	; (8005598 <TIM_OC1_SetConfig+0xf4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d111      	bne.n	800556a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800554c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4313      	orrs	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	699b      	ldr	r3, [r3, #24]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	621a      	str	r2, [r3, #32]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	40012c00 	.word	0x40012c00
 8005594:	40014000 	.word	0x40014000
 8005598:	40014400 	.word	0x40014400

0800559c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800559c:	b480      	push	{r7}
 800559e:	b087      	sub	sp, #28
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6a1b      	ldr	r3, [r3, #32]
 80055aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	f023 0210 	bic.w	r2, r3, #16
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	021b      	lsls	r3, r3, #8
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f023 0320 	bic.w	r3, r3, #32
 80055ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	011b      	lsls	r3, r3, #4
 80055f2:	697a      	ldr	r2, [r7, #20]
 80055f4:	4313      	orrs	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a22      	ldr	r2, [pc, #136]	; (8005684 <TIM_OC2_SetConfig+0xe8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10d      	bne.n	800561c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005606:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	011b      	lsls	r3, r3, #4
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800561a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a19      	ldr	r2, [pc, #100]	; (8005684 <TIM_OC2_SetConfig+0xe8>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d007      	beq.n	8005634 <TIM_OC2_SetConfig+0x98>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a18      	ldr	r2, [pc, #96]	; (8005688 <TIM_OC2_SetConfig+0xec>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_OC2_SetConfig+0x98>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a17      	ldr	r2, [pc, #92]	; (800568c <TIM_OC2_SetConfig+0xf0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d113      	bne.n	800565c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800563a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005642:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	4313      	orrs	r3, r2
 800564e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	4313      	orrs	r3, r2
 800565a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	697a      	ldr	r2, [r7, #20]
 8005674:	621a      	str	r2, [r3, #32]
}
 8005676:	bf00      	nop
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40012c00 	.word	0x40012c00
 8005688:	40014000 	.word	0x40014000
 800568c:	40014400 	.word	0x40014400

08005690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005690:	b480      	push	{r7}
 8005692:	b087      	sub	sp, #28
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	69db      	ldr	r3, [r3, #28]
 80056b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f023 0303 	bic.w	r3, r3, #3
 80056ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	021b      	lsls	r3, r3, #8
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a21      	ldr	r2, [pc, #132]	; (8005774 <TIM_OC3_SetConfig+0xe4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d10d      	bne.n	800570e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	4313      	orrs	r3, r2
 8005704:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800570c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a18      	ldr	r2, [pc, #96]	; (8005774 <TIM_OC3_SetConfig+0xe4>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_OC3_SetConfig+0x96>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a17      	ldr	r2, [pc, #92]	; (8005778 <TIM_OC3_SetConfig+0xe8>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_OC3_SetConfig+0x96>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a16      	ldr	r2, [pc, #88]	; (800577c <TIM_OC3_SetConfig+0xec>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d113      	bne.n	800574e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800572c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005734:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	011b      	lsls	r3, r3, #4
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	011b      	lsls	r3, r3, #4
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	4313      	orrs	r3, r2
 800574c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	621a      	str	r2, [r3, #32]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40014000 	.word	0x40014000
 800577c:	40014400 	.word	0x40014400

08005780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	021b      	lsls	r3, r3, #8
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	031b      	lsls	r3, r3, #12
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	4313      	orrs	r3, r2
 80057da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a14      	ldr	r2, [pc, #80]	; (8005830 <TIM_OC4_SetConfig+0xb0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d007      	beq.n	80057f4 <TIM_OC4_SetConfig+0x74>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a13      	ldr	r2, [pc, #76]	; (8005834 <TIM_OC4_SetConfig+0xb4>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC4_SetConfig+0x74>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a12      	ldr	r2, [pc, #72]	; (8005838 <TIM_OC4_SetConfig+0xb8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d109      	bne.n	8005808 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	019b      	lsls	r3, r3, #6
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	621a      	str	r2, [r3, #32]
}
 8005822:	bf00      	nop
 8005824:	371c      	adds	r7, #28
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40012c00 	.word	0x40012c00
 8005834:	40014000 	.word	0x40014000
 8005838:	40014400 	.word	0x40014400

0800583c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005880:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a13      	ldr	r2, [pc, #76]	; (80058e0 <TIM_OC5_SetConfig+0xa4>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d007      	beq.n	80058a6 <TIM_OC5_SetConfig+0x6a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a12      	ldr	r2, [pc, #72]	; (80058e4 <TIM_OC5_SetConfig+0xa8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d003      	beq.n	80058a6 <TIM_OC5_SetConfig+0x6a>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4a11      	ldr	r2, [pc, #68]	; (80058e8 <TIM_OC5_SetConfig+0xac>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d109      	bne.n	80058ba <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	4313      	orrs	r3, r2
 80058b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68fa      	ldr	r2, [r7, #12]
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	685a      	ldr	r2, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	621a      	str	r2, [r3, #32]
}
 80058d4:	bf00      	nop
 80058d6:	371c      	adds	r7, #28
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr
 80058e0:	40012c00 	.word	0x40012c00
 80058e4:	40014000 	.word	0x40014000
 80058e8:	40014400 	.word	0x40014400

080058ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800591a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800591e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	051b      	lsls	r3, r3, #20
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a14      	ldr	r2, [pc, #80]	; (8005994 <TIM_OC6_SetConfig+0xa8>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d007      	beq.n	8005958 <TIM_OC6_SetConfig+0x6c>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a13      	ldr	r2, [pc, #76]	; (8005998 <TIM_OC6_SetConfig+0xac>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_OC6_SetConfig+0x6c>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a12      	ldr	r2, [pc, #72]	; (800599c <TIM_OC6_SetConfig+0xb0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d109      	bne.n	800596c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800595e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	029b      	lsls	r3, r3, #10
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40014000 	.word	0x40014000
 800599c:	40014400 	.word	0x40014400

080059a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	f023 0201 	bic.w	r2, r3, #1
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	011b      	lsls	r3, r3, #4
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 030a 	bic.w	r3, r3, #10
 80059dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4313      	orrs	r3, r2
 80059e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	697a      	ldr	r2, [r7, #20]
 80059f0:	621a      	str	r2, [r3, #32]
}
 80059f2:	bf00      	nop
 80059f4:	371c      	adds	r7, #28
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b087      	sub	sp, #28
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	60f8      	str	r0, [r7, #12]
 8005a06:	60b9      	str	r1, [r7, #8]
 8005a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	f023 0210 	bic.w	r2, r3, #16
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	031b      	lsls	r3, r3, #12
 8005a2e:	693a      	ldr	r2, [r7, #16]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	621a      	str	r2, [r3, #32]
}
 8005a52:	bf00      	nop
 8005a54:	371c      	adds	r7, #28
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b085      	sub	sp, #20
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	f043 0307 	orr.w	r3, r3, #7
 8005a80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	609a      	str	r2, [r3, #8]
}
 8005a88:	bf00      	nop
 8005a8a:	3714      	adds	r7, #20
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b087      	sub	sp, #28
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	607a      	str	r2, [r7, #4]
 8005aa0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005aae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	021a      	lsls	r2, r3, #8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	697a      	ldr	r2, [r7, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	609a      	str	r2, [r3, #8]
}
 8005ac8:	bf00      	nop
 8005aca:	371c      	adds	r7, #28
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	f003 031f 	and.w	r3, r3, #31
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6a1a      	ldr	r2, [r3, #32]
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	43db      	mvns	r3, r3
 8005af6:	401a      	ands	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a1a      	ldr	r2, [r3, #32]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d101      	bne.n	8005b38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b34:	2302      	movs	r3, #2
 8005b36:	e054      	b.n	8005be2 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a24      	ldr	r2, [pc, #144]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d108      	bne.n	8005b74 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005b68:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68fa      	ldr	r2, [r7, #12]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a17      	ldr	r2, [pc, #92]	; (8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d00e      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba0:	d009      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a13      	ldr	r2, [pc, #76]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d004      	beq.n	8005bb6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a11      	ldr	r2, [pc, #68]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d10c      	bne.n	8005bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	40012c00 	.word	0x40012c00
 8005bf4:	40000400 	.word	0x40000400
 8005bf8:	40014000 	.word	0x40014000

08005bfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c06:	2300      	movs	r3, #0
 8005c08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d101      	bne.n	8005c18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c14:	2302      	movs	r3, #2
 8005c16:	e060      	b.n	8005cda <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	699b      	ldr	r3, [r3, #24]
 8005c8c:	041b      	lsls	r3, r3, #16
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a14      	ldr	r2, [pc, #80]	; (8005ce8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d115      	bne.n	8005cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	051b      	lsls	r3, r3, #20
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	69db      	ldr	r3, [r3, #28]
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	6a1b      	ldr	r3, [r3, #32]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3714      	adds	r7, #20
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr
 8005ce6:	bf00      	nop
 8005ce8:	40012c00 	.word	0x40012c00

08005cec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cf4:	bf00      	nop
 8005cf6:	370c      	adds	r7, #12
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d08:	bf00      	nop
 8005d0a:	370c      	adds	r7, #12
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b083      	sub	sp, #12
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b082      	sub	sp, #8
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d101      	bne.n	8005d3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e040      	b.n	8005dbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d106      	bne.n	8005d50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f7fb fc9c 	bl	8001688 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2224      	movs	r2, #36	; 0x24
 8005d54:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f022 0201 	bic.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d002      	beq.n	8005d74 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 faae 	bl	80062d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d74:	6878      	ldr	r0, [r7, #4]
 8005d76:	f000 f825 	bl	8005dc4 <UART_SetConfig>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d101      	bne.n	8005d84 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e01b      	b.n	8005dbc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005da2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 fb2d 	bl	8006414 <UART_CheckIdleState>
 8005dba:	4603      	mov	r3, r0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3708      	adds	r7, #8
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005dc8:	b08a      	sub	sp, #40	; 0x28
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	431a      	orrs	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	4ba5      	ldr	r3, [pc, #660]	; (8006088 <UART_SetConfig+0x2c4>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	6812      	ldr	r2, [r2, #0]
 8005dfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dfc:	430b      	orrs	r3, r1
 8005dfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	699b      	ldr	r3, [r3, #24]
 8005e1a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a9a      	ldr	r2, [pc, #616]	; (800608c <UART_SetConfig+0x2c8>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d004      	beq.n	8005e30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e40:	430a      	orrs	r2, r1
 8005e42:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a91      	ldr	r2, [pc, #580]	; (8006090 <UART_SetConfig+0x2cc>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d126      	bne.n	8005e9c <UART_SetConfig+0xd8>
 8005e4e:	4b91      	ldr	r3, [pc, #580]	; (8006094 <UART_SetConfig+0x2d0>)
 8005e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e54:	f003 0303 	and.w	r3, r3, #3
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d81b      	bhi.n	8005e94 <UART_SetConfig+0xd0>
 8005e5c:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <UART_SetConfig+0xa0>)
 8005e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e62:	bf00      	nop
 8005e64:	08005e75 	.word	0x08005e75
 8005e68:	08005e85 	.word	0x08005e85
 8005e6c:	08005e7d 	.word	0x08005e7d
 8005e70:	08005e8d 	.word	0x08005e8d
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e7a:	e0d6      	b.n	800602a <UART_SetConfig+0x266>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e82:	e0d2      	b.n	800602a <UART_SetConfig+0x266>
 8005e84:	2304      	movs	r3, #4
 8005e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e8a:	e0ce      	b.n	800602a <UART_SetConfig+0x266>
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e92:	e0ca      	b.n	800602a <UART_SetConfig+0x266>
 8005e94:	2310      	movs	r3, #16
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9a:	e0c6      	b.n	800602a <UART_SetConfig+0x266>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a7d      	ldr	r2, [pc, #500]	; (8006098 <UART_SetConfig+0x2d4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d138      	bne.n	8005f18 <UART_SetConfig+0x154>
 8005ea6:	4b7b      	ldr	r3, [pc, #492]	; (8006094 <UART_SetConfig+0x2d0>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eac:	f003 030c 	and.w	r3, r3, #12
 8005eb0:	2b0c      	cmp	r3, #12
 8005eb2:	d82d      	bhi.n	8005f10 <UART_SetConfig+0x14c>
 8005eb4:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <UART_SetConfig+0xf8>)
 8005eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eba:	bf00      	nop
 8005ebc:	08005ef1 	.word	0x08005ef1
 8005ec0:	08005f11 	.word	0x08005f11
 8005ec4:	08005f11 	.word	0x08005f11
 8005ec8:	08005f11 	.word	0x08005f11
 8005ecc:	08005f01 	.word	0x08005f01
 8005ed0:	08005f11 	.word	0x08005f11
 8005ed4:	08005f11 	.word	0x08005f11
 8005ed8:	08005f11 	.word	0x08005f11
 8005edc:	08005ef9 	.word	0x08005ef9
 8005ee0:	08005f11 	.word	0x08005f11
 8005ee4:	08005f11 	.word	0x08005f11
 8005ee8:	08005f11 	.word	0x08005f11
 8005eec:	08005f09 	.word	0x08005f09
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ef6:	e098      	b.n	800602a <UART_SetConfig+0x266>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005efe:	e094      	b.n	800602a <UART_SetConfig+0x266>
 8005f00:	2304      	movs	r3, #4
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f06:	e090      	b.n	800602a <UART_SetConfig+0x266>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0e:	e08c      	b.n	800602a <UART_SetConfig+0x266>
 8005f10:	2310      	movs	r3, #16
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f16:	e088      	b.n	800602a <UART_SetConfig+0x266>
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a5f      	ldr	r2, [pc, #380]	; (800609c <UART_SetConfig+0x2d8>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d125      	bne.n	8005f6e <UART_SetConfig+0x1aa>
 8005f22:	4b5c      	ldr	r3, [pc, #368]	; (8006094 <UART_SetConfig+0x2d0>)
 8005f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005f2c:	2b30      	cmp	r3, #48	; 0x30
 8005f2e:	d016      	beq.n	8005f5e <UART_SetConfig+0x19a>
 8005f30:	2b30      	cmp	r3, #48	; 0x30
 8005f32:	d818      	bhi.n	8005f66 <UART_SetConfig+0x1a2>
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d00a      	beq.n	8005f4e <UART_SetConfig+0x18a>
 8005f38:	2b20      	cmp	r3, #32
 8005f3a:	d814      	bhi.n	8005f66 <UART_SetConfig+0x1a2>
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <UART_SetConfig+0x182>
 8005f40:	2b10      	cmp	r3, #16
 8005f42:	d008      	beq.n	8005f56 <UART_SetConfig+0x192>
 8005f44:	e00f      	b.n	8005f66 <UART_SetConfig+0x1a2>
 8005f46:	2300      	movs	r3, #0
 8005f48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f4c:	e06d      	b.n	800602a <UART_SetConfig+0x266>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f54:	e069      	b.n	800602a <UART_SetConfig+0x266>
 8005f56:	2304      	movs	r3, #4
 8005f58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f5c:	e065      	b.n	800602a <UART_SetConfig+0x266>
 8005f5e:	2308      	movs	r3, #8
 8005f60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f64:	e061      	b.n	800602a <UART_SetConfig+0x266>
 8005f66:	2310      	movs	r3, #16
 8005f68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6c:	e05d      	b.n	800602a <UART_SetConfig+0x266>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a4b      	ldr	r2, [pc, #300]	; (80060a0 <UART_SetConfig+0x2dc>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d125      	bne.n	8005fc4 <UART_SetConfig+0x200>
 8005f78:	4b46      	ldr	r3, [pc, #280]	; (8006094 <UART_SetConfig+0x2d0>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f82:	2bc0      	cmp	r3, #192	; 0xc0
 8005f84:	d016      	beq.n	8005fb4 <UART_SetConfig+0x1f0>
 8005f86:	2bc0      	cmp	r3, #192	; 0xc0
 8005f88:	d818      	bhi.n	8005fbc <UART_SetConfig+0x1f8>
 8005f8a:	2b80      	cmp	r3, #128	; 0x80
 8005f8c:	d00a      	beq.n	8005fa4 <UART_SetConfig+0x1e0>
 8005f8e:	2b80      	cmp	r3, #128	; 0x80
 8005f90:	d814      	bhi.n	8005fbc <UART_SetConfig+0x1f8>
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <UART_SetConfig+0x1d8>
 8005f96:	2b40      	cmp	r3, #64	; 0x40
 8005f98:	d008      	beq.n	8005fac <UART_SetConfig+0x1e8>
 8005f9a:	e00f      	b.n	8005fbc <UART_SetConfig+0x1f8>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fa2:	e042      	b.n	800602a <UART_SetConfig+0x266>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005faa:	e03e      	b.n	800602a <UART_SetConfig+0x266>
 8005fac:	2304      	movs	r3, #4
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fb2:	e03a      	b.n	800602a <UART_SetConfig+0x266>
 8005fb4:	2308      	movs	r3, #8
 8005fb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fba:	e036      	b.n	800602a <UART_SetConfig+0x266>
 8005fbc:	2310      	movs	r3, #16
 8005fbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005fc2:	e032      	b.n	800602a <UART_SetConfig+0x266>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a30      	ldr	r2, [pc, #192]	; (800608c <UART_SetConfig+0x2c8>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d12a      	bne.n	8006024 <UART_SetConfig+0x260>
 8005fce:	4b31      	ldr	r3, [pc, #196]	; (8006094 <UART_SetConfig+0x2d0>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fdc:	d01a      	beq.n	8006014 <UART_SetConfig+0x250>
 8005fde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fe2:	d81b      	bhi.n	800601c <UART_SetConfig+0x258>
 8005fe4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fe8:	d00c      	beq.n	8006004 <UART_SetConfig+0x240>
 8005fea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fee:	d815      	bhi.n	800601c <UART_SetConfig+0x258>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <UART_SetConfig+0x238>
 8005ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ff8:	d008      	beq.n	800600c <UART_SetConfig+0x248>
 8005ffa:	e00f      	b.n	800601c <UART_SetConfig+0x258>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006002:	e012      	b.n	800602a <UART_SetConfig+0x266>
 8006004:	2302      	movs	r3, #2
 8006006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800600a:	e00e      	b.n	800602a <UART_SetConfig+0x266>
 800600c:	2304      	movs	r3, #4
 800600e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006012:	e00a      	b.n	800602a <UART_SetConfig+0x266>
 8006014:	2308      	movs	r3, #8
 8006016:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800601a:	e006      	b.n	800602a <UART_SetConfig+0x266>
 800601c:	2310      	movs	r3, #16
 800601e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006022:	e002      	b.n	800602a <UART_SetConfig+0x266>
 8006024:	2310      	movs	r3, #16
 8006026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	4a17      	ldr	r2, [pc, #92]	; (800608c <UART_SetConfig+0x2c8>)
 8006030:	4293      	cmp	r3, r2
 8006032:	f040 808b 	bne.w	800614c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006036:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800603a:	2b08      	cmp	r3, #8
 800603c:	d834      	bhi.n	80060a8 <UART_SetConfig+0x2e4>
 800603e:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <UART_SetConfig+0x280>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006069 	.word	0x08006069
 8006048:	080060a9 	.word	0x080060a9
 800604c:	08006071 	.word	0x08006071
 8006050:	080060a9 	.word	0x080060a9
 8006054:	08006077 	.word	0x08006077
 8006058:	080060a9 	.word	0x080060a9
 800605c:	080060a9 	.word	0x080060a9
 8006060:	080060a9 	.word	0x080060a9
 8006064:	0800607f 	.word	0x0800607f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006068:	f7fd ff6c 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 800606c:	61f8      	str	r0, [r7, #28]
        break;
 800606e:	e021      	b.n	80060b4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006070:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <UART_SetConfig+0x2e0>)
 8006072:	61fb      	str	r3, [r7, #28]
        break;
 8006074:	e01e      	b.n	80060b4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006076:	f7fd fecd 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 800607a:	61f8      	str	r0, [r7, #28]
        break;
 800607c:	e01a      	b.n	80060b4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800607e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006082:	61fb      	str	r3, [r7, #28]
        break;
 8006084:	e016      	b.n	80060b4 <UART_SetConfig+0x2f0>
 8006086:	bf00      	nop
 8006088:	efff69f3 	.word	0xefff69f3
 800608c:	40008000 	.word	0x40008000
 8006090:	40013800 	.word	0x40013800
 8006094:	40021000 	.word	0x40021000
 8006098:	40004400 	.word	0x40004400
 800609c:	40004800 	.word	0x40004800
 80060a0:	40004c00 	.word	0x40004c00
 80060a4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80060b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 80fa 	beq.w	80062b0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	685a      	ldr	r2, [r3, #4]
 80060c0:	4613      	mov	r3, r2
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	4413      	add	r3, r2
 80060c6:	69fa      	ldr	r2, [r7, #28]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d305      	bcc.n	80060d8 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d903      	bls.n	80060e0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80060de:	e0e7      	b.n	80062b0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	2200      	movs	r2, #0
 80060e4:	461c      	mov	r4, r3
 80060e6:	4615      	mov	r5, r2
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 0300 	mov.w	r3, #0
 80060f0:	022b      	lsls	r3, r5, #8
 80060f2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80060f6:	0222      	lsls	r2, r4, #8
 80060f8:	68f9      	ldr	r1, [r7, #12]
 80060fa:	6849      	ldr	r1, [r1, #4]
 80060fc:	0849      	lsrs	r1, r1, #1
 80060fe:	2000      	movs	r0, #0
 8006100:	4688      	mov	r8, r1
 8006102:	4681      	mov	r9, r0
 8006104:	eb12 0a08 	adds.w	sl, r2, r8
 8006108:	eb43 0b09 	adc.w	fp, r3, r9
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	603b      	str	r3, [r7, #0]
 8006114:	607a      	str	r2, [r7, #4]
 8006116:	e9d7 2300 	ldrd	r2, r3, [r7]
 800611a:	4650      	mov	r0, sl
 800611c:	4659      	mov	r1, fp
 800611e:	f7fa fbb9 	bl	8000894 <__aeabi_uldivmod>
 8006122:	4602      	mov	r2, r0
 8006124:	460b      	mov	r3, r1
 8006126:	4613      	mov	r3, r2
 8006128:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006130:	d308      	bcc.n	8006144 <UART_SetConfig+0x380>
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006138:	d204      	bcs.n	8006144 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	60da      	str	r2, [r3, #12]
 8006142:	e0b5      	b.n	80062b0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800614a:	e0b1      	b.n	80062b0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	69db      	ldr	r3, [r3, #28]
 8006150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006154:	d15d      	bne.n	8006212 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8006156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800615a:	2b08      	cmp	r3, #8
 800615c:	d827      	bhi.n	80061ae <UART_SetConfig+0x3ea>
 800615e:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <UART_SetConfig+0x3a0>)
 8006160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006164:	08006189 	.word	0x08006189
 8006168:	08006191 	.word	0x08006191
 800616c:	08006199 	.word	0x08006199
 8006170:	080061af 	.word	0x080061af
 8006174:	0800619f 	.word	0x0800619f
 8006178:	080061af 	.word	0x080061af
 800617c:	080061af 	.word	0x080061af
 8006180:	080061af 	.word	0x080061af
 8006184:	080061a7 	.word	0x080061a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006188:	f7fd fedc 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 800618c:	61f8      	str	r0, [r7, #28]
        break;
 800618e:	e014      	b.n	80061ba <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006190:	f7fd feee 	bl	8003f70 <HAL_RCC_GetPCLK2Freq>
 8006194:	61f8      	str	r0, [r7, #28]
        break;
 8006196:	e010      	b.n	80061ba <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006198:	4b4c      	ldr	r3, [pc, #304]	; (80062cc <UART_SetConfig+0x508>)
 800619a:	61fb      	str	r3, [r7, #28]
        break;
 800619c:	e00d      	b.n	80061ba <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800619e:	f7fd fe39 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 80061a2:	61f8      	str	r0, [r7, #28]
        break;
 80061a4:	e009      	b.n	80061ba <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061aa:	61fb      	str	r3, [r7, #28]
        break;
 80061ac:	e005      	b.n	80061ba <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 80061ae:	2300      	movs	r3, #0
 80061b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80061b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d077      	beq.n	80062b0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	005a      	lsls	r2, r3, #1
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	441a      	add	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	2b0f      	cmp	r3, #15
 80061da:	d916      	bls.n	800620a <UART_SetConfig+0x446>
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061e2:	d212      	bcs.n	800620a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	f023 030f 	bic.w	r3, r3, #15
 80061ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	085b      	lsrs	r3, r3, #1
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	b29a      	uxth	r2, r3
 80061fa:	8afb      	ldrh	r3, [r7, #22]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	8afa      	ldrh	r2, [r7, #22]
 8006206:	60da      	str	r2, [r3, #12]
 8006208:	e052      	b.n	80062b0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006210:	e04e      	b.n	80062b0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006212:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006216:	2b08      	cmp	r3, #8
 8006218:	d827      	bhi.n	800626a <UART_SetConfig+0x4a6>
 800621a:	a201      	add	r2, pc, #4	; (adr r2, 8006220 <UART_SetConfig+0x45c>)
 800621c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006220:	08006245 	.word	0x08006245
 8006224:	0800624d 	.word	0x0800624d
 8006228:	08006255 	.word	0x08006255
 800622c:	0800626b 	.word	0x0800626b
 8006230:	0800625b 	.word	0x0800625b
 8006234:	0800626b 	.word	0x0800626b
 8006238:	0800626b 	.word	0x0800626b
 800623c:	0800626b 	.word	0x0800626b
 8006240:	08006263 	.word	0x08006263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006244:	f7fd fe7e 	bl	8003f44 <HAL_RCC_GetPCLK1Freq>
 8006248:	61f8      	str	r0, [r7, #28]
        break;
 800624a:	e014      	b.n	8006276 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800624c:	f7fd fe90 	bl	8003f70 <HAL_RCC_GetPCLK2Freq>
 8006250:	61f8      	str	r0, [r7, #28]
        break;
 8006252:	e010      	b.n	8006276 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006254:	4b1d      	ldr	r3, [pc, #116]	; (80062cc <UART_SetConfig+0x508>)
 8006256:	61fb      	str	r3, [r7, #28]
        break;
 8006258:	e00d      	b.n	8006276 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800625a:	f7fd fddb 	bl	8003e14 <HAL_RCC_GetSysClockFreq>
 800625e:	61f8      	str	r0, [r7, #28]
        break;
 8006260:	e009      	b.n	8006276 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006266:	61fb      	str	r3, [r7, #28]
        break;
 8006268:	e005      	b.n	8006276 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 800626a:	2300      	movs	r3, #0
 800626c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006274:	bf00      	nop
    }

    if (pclk != 0U)
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d019      	beq.n	80062b0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	085a      	lsrs	r2, r3, #1
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	441a      	add	r2, r3
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	fbb2 f3f3 	udiv	r3, r2, r3
 800628e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b0f      	cmp	r3, #15
 8006294:	d909      	bls.n	80062aa <UART_SetConfig+0x4e6>
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800629c:	d205      	bcs.n	80062aa <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	60da      	str	r2, [r3, #12]
 80062a8:	e002      	b.n	80062b0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2200      	movs	r2, #0
 80062b4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2200      	movs	r2, #0
 80062ba:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80062bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3728      	adds	r7, #40	; 0x28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062ca:	bf00      	nop
 80062cc:	00f42400 	.word	0x00f42400

080062d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	f003 0308 	and.w	r3, r3, #8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d00a      	beq.n	80062fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	685b      	ldr	r3, [r3, #4]
 80062ea:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	430a      	orrs	r2, r1
 80062f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00a      	beq.n	800631c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	430a      	orrs	r2, r1
 800631a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00a      	beq.n	800633e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	430a      	orrs	r2, r1
 800633c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00a      	beq.n	8006360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00a      	beq.n	8006382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00a      	beq.n	80063a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d01a      	beq.n	80063e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ce:	d10a      	bne.n	80063e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	605a      	str	r2, [r3, #4]
  }
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b098      	sub	sp, #96	; 0x60
 8006418:	af02      	add	r7, sp, #8
 800641a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006424:	f7fb fa6c 	bl	8001900 <HAL_GetTick>
 8006428:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b08      	cmp	r3, #8
 8006436:	d12e      	bne.n	8006496 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800643c:	9300      	str	r3, [sp, #0]
 800643e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006440:	2200      	movs	r2, #0
 8006442:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 f88c 	bl	8006564 <UART_WaitOnFlagUntilTimeout>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d021      	beq.n	8006496 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	e853 3f00 	ldrex	r3, [r3]
 800645e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006462:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006466:	653b      	str	r3, [r7, #80]	; 0x50
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	461a      	mov	r2, r3
 800646e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006470:	647b      	str	r3, [r7, #68]	; 0x44
 8006472:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006476:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800647e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e6      	bne.n	8006452 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2220      	movs	r2, #32
 8006488:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e062      	b.n	800655c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 0304 	and.w	r3, r3, #4
 80064a0:	2b04      	cmp	r3, #4
 80064a2:	d149      	bne.n	8006538 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064a8:	9300      	str	r3, [sp, #0]
 80064aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ac:	2200      	movs	r2, #0
 80064ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f856 	bl	8006564 <UART_WaitOnFlagUntilTimeout>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d03c      	beq.n	8006538 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	e853 3f00 	ldrex	r3, [r3]
 80064ca:	623b      	str	r3, [r7, #32]
   return(result);
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	461a      	mov	r2, r3
 80064da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064dc:	633b      	str	r3, [r7, #48]	; 0x30
 80064de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064e4:	e841 2300 	strex	r3, r2, [r1]
 80064e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1e6      	bne.n	80064be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	3308      	adds	r3, #8
 80064f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0301 	bic.w	r3, r3, #1
 8006506:	64bb      	str	r3, [r7, #72]	; 0x48
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3308      	adds	r3, #8
 800650e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006510:	61fa      	str	r2, [r7, #28]
 8006512:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	69b9      	ldr	r1, [r7, #24]
 8006516:	69fa      	ldr	r2, [r7, #28]
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	617b      	str	r3, [r7, #20]
   return(result);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e5      	bne.n	80064f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006534:	2303      	movs	r3, #3
 8006536:	e011      	b.n	800655c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2220      	movs	r2, #32
 800653c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2220      	movs	r2, #32
 8006542:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3758      	adds	r7, #88	; 0x58
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	603b      	str	r3, [r7, #0]
 8006570:	4613      	mov	r3, r2
 8006572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006574:	e049      	b.n	800660a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657c:	d045      	beq.n	800660a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800657e:	f7fb f9bf 	bl	8001900 <HAL_GetTick>
 8006582:	4602      	mov	r2, r0
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	1ad3      	subs	r3, r2, r3
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	429a      	cmp	r2, r3
 800658c:	d302      	bcc.n	8006594 <UART_WaitOnFlagUntilTimeout+0x30>
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d101      	bne.n	8006598 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006594:	2303      	movs	r3, #3
 8006596:	e048      	b.n	800662a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f003 0304 	and.w	r3, r3, #4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d031      	beq.n	800660a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69db      	ldr	r3, [r3, #28]
 80065ac:	f003 0308 	and.w	r3, r3, #8
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d110      	bne.n	80065d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2208      	movs	r2, #8
 80065ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065bc:	68f8      	ldr	r0, [r7, #12]
 80065be:	f000 f838 	bl	8006632 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2208      	movs	r2, #8
 80065c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e029      	b.n	800662a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	69db      	ldr	r3, [r3, #28]
 80065dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065e4:	d111      	bne.n	800660a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f81e 	bl	8006632 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2220      	movs	r2, #32
 80065fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e00f      	b.n	800662a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	69da      	ldr	r2, [r3, #28]
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	4013      	ands	r3, r2
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	429a      	cmp	r2, r3
 8006618:	bf0c      	ite	eq
 800661a:	2301      	moveq	r3, #1
 800661c:	2300      	movne	r3, #0
 800661e:	b2db      	uxtb	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	429a      	cmp	r2, r3
 8006626:	d0a6      	beq.n	8006576 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3710      	adds	r7, #16
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006632:	b480      	push	{r7}
 8006634:	b095      	sub	sp, #84	; 0x54
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800664e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	461a      	mov	r2, r3
 8006656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006658:	643b      	str	r3, [r7, #64]	; 0x40
 800665a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800665e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e6      	bne.n	800663a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3308      	adds	r3, #8
 8006672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	e853 3f00 	ldrex	r3, [r3]
 800667a:	61fb      	str	r3, [r7, #28]
   return(result);
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	f023 0301 	bic.w	r3, r3, #1
 8006682:	64bb      	str	r3, [r7, #72]	; 0x48
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3308      	adds	r3, #8
 800668a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800668c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006690:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006694:	e841 2300 	strex	r3, r2, [r1]
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1e5      	bne.n	800666c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d118      	bne.n	80066da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	e853 3f00 	ldrex	r3, [r3]
 80066b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	f023 0310 	bic.w	r3, r3, #16
 80066bc:	647b      	str	r3, [r7, #68]	; 0x44
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	461a      	mov	r2, r3
 80066c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066c6:	61bb      	str	r3, [r7, #24]
 80066c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ca:	6979      	ldr	r1, [r7, #20]
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	e841 2300 	strex	r3, r2, [r1]
 80066d2:	613b      	str	r3, [r7, #16]
   return(result);
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d1e6      	bne.n	80066a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2220      	movs	r2, #32
 80066de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80066ee:	bf00      	nop
 80066f0:	3754      	adds	r7, #84	; 0x54
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr

080066fa <memset>:
 80066fa:	4402      	add	r2, r0
 80066fc:	4603      	mov	r3, r0
 80066fe:	4293      	cmp	r3, r2
 8006700:	d100      	bne.n	8006704 <memset+0xa>
 8006702:	4770      	bx	lr
 8006704:	f803 1b01 	strb.w	r1, [r3], #1
 8006708:	e7f9      	b.n	80066fe <memset+0x4>
	...

0800670c <__libc_init_array>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	4d0d      	ldr	r5, [pc, #52]	; (8006744 <__libc_init_array+0x38>)
 8006710:	4c0d      	ldr	r4, [pc, #52]	; (8006748 <__libc_init_array+0x3c>)
 8006712:	1b64      	subs	r4, r4, r5
 8006714:	10a4      	asrs	r4, r4, #2
 8006716:	2600      	movs	r6, #0
 8006718:	42a6      	cmp	r6, r4
 800671a:	d109      	bne.n	8006730 <__libc_init_array+0x24>
 800671c:	4d0b      	ldr	r5, [pc, #44]	; (800674c <__libc_init_array+0x40>)
 800671e:	4c0c      	ldr	r4, [pc, #48]	; (8006750 <__libc_init_array+0x44>)
 8006720:	f000 f860 	bl	80067e4 <_init>
 8006724:	1b64      	subs	r4, r4, r5
 8006726:	10a4      	asrs	r4, r4, #2
 8006728:	2600      	movs	r6, #0
 800672a:	42a6      	cmp	r6, r4
 800672c:	d105      	bne.n	800673a <__libc_init_array+0x2e>
 800672e:	bd70      	pop	{r4, r5, r6, pc}
 8006730:	f855 3b04 	ldr.w	r3, [r5], #4
 8006734:	4798      	blx	r3
 8006736:	3601      	adds	r6, #1
 8006738:	e7ee      	b.n	8006718 <__libc_init_array+0xc>
 800673a:	f855 3b04 	ldr.w	r3, [r5], #4
 800673e:	4798      	blx	r3
 8006740:	3601      	adds	r6, #1
 8006742:	e7f2      	b.n	800672a <__libc_init_array+0x1e>
 8006744:	0800684c 	.word	0x0800684c
 8006748:	0800684c 	.word	0x0800684c
 800674c:	0800684c 	.word	0x0800684c
 8006750:	08006850 	.word	0x08006850

08006754 <round>:
 8006754:	ec53 2b10 	vmov	r2, r3, d0
 8006758:	b570      	push	{r4, r5, r6, lr}
 800675a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800675e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8006762:	2813      	cmp	r0, #19
 8006764:	ee10 5a10 	vmov	r5, s0
 8006768:	4619      	mov	r1, r3
 800676a:	dc18      	bgt.n	800679e <round+0x4a>
 800676c:	2800      	cmp	r0, #0
 800676e:	da09      	bge.n	8006784 <round+0x30>
 8006770:	3001      	adds	r0, #1
 8006772:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8006776:	d103      	bne.n	8006780 <round+0x2c>
 8006778:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800677c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8006780:	2300      	movs	r3, #0
 8006782:	e02a      	b.n	80067da <round+0x86>
 8006784:	4c16      	ldr	r4, [pc, #88]	; (80067e0 <round+0x8c>)
 8006786:	4104      	asrs	r4, r0
 8006788:	ea03 0604 	and.w	r6, r3, r4
 800678c:	4316      	orrs	r6, r2
 800678e:	d011      	beq.n	80067b4 <round+0x60>
 8006790:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006794:	4103      	asrs	r3, r0
 8006796:	440b      	add	r3, r1
 8006798:	ea23 0104 	bic.w	r1, r3, r4
 800679c:	e7f0      	b.n	8006780 <round+0x2c>
 800679e:	2833      	cmp	r0, #51	; 0x33
 80067a0:	dd0b      	ble.n	80067ba <round+0x66>
 80067a2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80067a6:	d105      	bne.n	80067b4 <round+0x60>
 80067a8:	ee10 0a10 	vmov	r0, s0
 80067ac:	f7f9 fe44 	bl	8000438 <__adddf3>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	ec43 2b10 	vmov	d0, r2, r3
 80067b8:	bd70      	pop	{r4, r5, r6, pc}
 80067ba:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 80067be:	f04f 34ff 	mov.w	r4, #4294967295
 80067c2:	40f4      	lsrs	r4, r6
 80067c4:	4214      	tst	r4, r2
 80067c6:	d0f5      	beq.n	80067b4 <round+0x60>
 80067c8:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 80067cc:	2301      	movs	r3, #1
 80067ce:	4083      	lsls	r3, r0
 80067d0:	195b      	adds	r3, r3, r5
 80067d2:	bf28      	it	cs
 80067d4:	3101      	addcs	r1, #1
 80067d6:	ea23 0304 	bic.w	r3, r3, r4
 80067da:	461a      	mov	r2, r3
 80067dc:	460b      	mov	r3, r1
 80067de:	e7e9      	b.n	80067b4 <round+0x60>
 80067e0:	000fffff 	.word	0x000fffff

080067e4 <_init>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	bf00      	nop
 80067e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ea:	bc08      	pop	{r3}
 80067ec:	469e      	mov	lr, r3
 80067ee:	4770      	bx	lr

080067f0 <_fini>:
 80067f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f2:	bf00      	nop
 80067f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067f6:	bc08      	pop	{r3}
 80067f8:	469e      	mov	lr, r3
 80067fa:	4770      	bx	lr
